{
  
    
        "post0": {
            "title": "Map Visualization With Plotly",
            "content": "1) Import libraries . import json import requests import numpy as np import pandas as pd import plotly.express as px import plotly.graph_objects as go from plotly.subplots import make_subplots from sklearn.preprocessing import MinMaxScaler pd.options.mode.chained_assignment = None # default=&#39;warn&#39; . 2) Data preparation . Original dataset sources: . https://www.kaggle.com/code/docxian/visualize-seabird-tracks/data | https://raw.githubusercontent.com/suchith91/wdi/master/WDI_Data_Selected.csv | https://www.gov.br/anac/pt-br/assuntos/dados-e-estatisticas/dados-estatisticos/dados-estatisticos | . 2.1) World Indicators Dataset . 2.1.1) Load dataset . # Step 1: Import dataset data = pd.read_csv(&quot;https://raw.githubusercontent.com/leonardodecastro/data/main/WDI_Data_Selected.csv&quot;, encoding=&#39;cp1252&#39;).drop([&#39;Indicator Code&#39;], axis= 1) # Step 2: Change dataset to allow for the use of map libraries world_data_df = pd.melt(data, id_vars=[&#39;Country Name&#39;, &#39;Country Code&#39;,&#39;Indicator Name&#39;], var_name=&#39;Year&#39;, value_name=&#39;Indicator Value&#39;) world_data_df[&#39;Year&#39;] = world_data_df[&#39;Year&#39;].astype(&#39;int&#39;) world_data_df.head(2) . Country Name Country Code Indicator Name Year Indicator Value . 0 Arab World | ARB | CO2 emissions (metric tons per capita) | 1960 | 0.644 | . 1 Arab World | ARB | Exports of goods and services (% of GDP) | 1960 | NaN | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 2.1.2) Create datasets for specific indicator . # Create dataset for GDP Growth per year GDP_growth_df = world_data_df[world_data_df[&#39;Indicator Name&#39;] == &#39;GDP growth (annual %)&#39;] # Create value ranges for certain visualizations bins= [GDP_growth_df[&#39;Indicator Value&#39;].min()-1, -10, -5, 0, 5, 10, GDP_growth_df[&#39;Indicator Value&#39;].max()+1] labels = [&#39;&lt; -10 %&#39; , &#39;-10% to -5%&#39;, &#39;-5% to 0%&#39;,&#39;0% to 5%&#39;,&#39;5% to 10%&#39;,&#39;&gt; 10%&#39;] GDP_growth_df.loc[:,&#39;Growth Ranges&#39;]= pd.cut(GDP_growth_df[&#39;Indicator Value&#39;], bins=bins, labels=labels, right=False).astype(&#39;str&#39;) . 2.2) Flight Paths Brazil . The following dataset was created using public information. The codes used to represent airports refer to each state in Brazil. The flight information is aggregated so as to determine the amount of people that travel per year from one Brazilian state to another. . flight_path_df = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/airplane_flights_brazil.csv&#39;) . 2.3) Bird Migration Dataset . 2.3.1) Load dataset . bird_routes_df = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/anon_gps_tracks_with_dive.csv&#39;) . 2.3.2) Clean the dataset . # Step 1: Limit the dataset to the features we seek to investigate final_bird_df = bird_routes_df[[&#39;lat&#39;,&#39;lon&#39;,&#39;bird&#39;,&#39;date_time&#39;,&#39;species&#39;,&#39;alt&#39;]] # Step 2: Transform the date time variables final_bird_df[&#39;date_time&#39;] = pd.to_datetime(final_bird_df[&#39;date_time&#39;]) # Step 3: Set the date time variable as the index do that we can resample the dataset for every 15 minutes final_bird_df.set_index(&quot;date_time&quot;,inplace=True) final_bird_df = final_bird_df.groupby([&#39;bird&#39;,&#39;species&#39;]).resample(&#39;15min&#39;).mean() # Step 4: Reset the dataset index final_bird_df = final_bird_df.reset_index(level=1) final_bird_df = final_bird_df.drop(&#39;bird&#39;, axis=1).reset_index() # Step 5: Make sure the bird identifier is considered a string final_bird_df[&#39;bird&#39;] = final_bird_df[&#39;bird&#39;].astype(&#39;int&#39;).astype(&#39;str&#39;) # Step 6: Part of the analysis is focused on the Rathlin Island. Thus, we must create a dataset containing solely the data for this region. rathlin_island = final_bird_df[(final_bird_df[&#39;lat&#39;] &lt; 55.309) &amp; (final_bird_df[&#39;lat&#39;] &gt; 55.254) &amp; (final_bird_df[&#39;lon&#39;] &gt; -6.3194) &amp; (final_bird_df[&#39;lon&#39;] &lt; -6.1416)] . 3) Time Series Visualizations (Choropleth) . 3.1.1) Using continuous color schemes . We need to use ISO codes with 3 letters for plotly.express to work properly . # Step 1: Create visualization fig = px.choropleth(GDP_growth_df[GDP_growth_df[&#39;Year&#39;]&gt;=1961], # Limit the analysis to years for which that is plenty of data locations=&quot;Country Code&quot;, # Column where country code with 3 letters can be found color=&quot;Indicator Value&quot;, # Indicator Value is the numerical value we want to examine hover_name=&quot;Country Code&quot;, # Column to add to hover information animation_frame=&#39;Year&#39;, # Show column that will be used in the animation frame color_continuous_scale=px.colors.diverging.RdYlGn, # Select the type of divergent color scheme to be used height = 700) # Adjust the size of the figure # Step 2: Control the speed of the transitions fig.layout.updatemenus[0].buttons[0].args[1][&#39;frame&#39;][&#39;duration&#39;] = 1000 fig.layout.updatemenus[0].buttons[0].args[1][&#39;transition&#39;][&#39;duration&#39;] = 10 # Step 3: Add title to the plot fig.update_layout(title_text=&#39;GDP Yealy Growth (%)&#39;, title_x=0.5) # Step 4: Syle the map fig.update_geos(showocean=True, oceancolor=&quot;#99cccc&quot;) fig.show() . . . Insight: The map uses divergent colors that help determine which countries are doing better each year. However, the color legend varies every year, which means that at times red can mean small positive growth while the very same red color can mean -25% annual GDP growth. The following visualization address this limitation. . 3.1.2) Using discrete color schemes . # Step 1: Create a dictionary to map colors to each of the categories color_discrete_dict = {&#39;nan&#39;: &#39;#4d4d4d&#39;, &#39;&lt; -10 %&#39;: &#39;#d73027&#39;, &#39;-10% to -5%&#39; : &#39;#fc8d59&#39;, &#39;-5% to 0%&#39; : &#39;#fee08b&#39;, &#39;0% to 5%&#39; : &#39;#d9ef8b&#39;, &#39;5% to 10%&#39; : &#39;#91cf60&#39;, &#39;&gt; 10%&#39; : &#39;#1a9850&#39;} # Step 2: Create a dictionary with order of the legend labels category_orders_dict = {&#39;Growth Ranges&#39; : [&#39;nan&#39;, &#39;&lt; -10 %&#39; , &#39;-10% to -5%&#39;, &#39;-5% to 0%&#39;,&#39;0% to 5%&#39;,&#39;5% to 10%&#39;, &#39;&gt; 10%&#39;]} # Step 3: Create visualization fig = px.choropleth(GDP_growth_df[GDP_growth_df[&#39;Year&#39;]&gt;=1961], # Limit the analysis to years for which that is plenty of data locations=&quot;Country Code&quot;, # Column where country code with 3 letters can be found color=&quot;Growth Ranges&quot;, # Indicator Value is the numerical value we want to examine color_discrete_map = color_discrete_dict, # Dictionary to map colors to each of the categories category_orders= category_orders_dict, # Dictionary with order of the legend labels hover_name=&quot;Country Code&quot;, # Column to add to hover information animation_frame=&#39;Year&#39;, # Show column that will be used in the animation frame height = 700) # Adjust the size of the figure # Step 4: Control the speed of the transitions fig.layout.updatemenus[0].buttons[0].args[1][&#39;frame&#39;][&#39;duration&#39;] = 1000 fig.layout.updatemenus[0].buttons[0].args[1][&#39;transition&#39;][&#39;duration&#39;] = 10 # Step 5: Add title to the plot fig.update_layout(title_text=&#39;GDP Yealy Growth (%)&#39;, title_x=0.5) # Step 6: Syle the map fig.update_geos(showocean=True, oceancolor=&quot;#99cccc&quot;) fig.show() . . . Insight: The map uses divergent colors that help determine which countries are doing better each year. The use of discrete colors help maintain color consistency for each year animation. . 3.1.3) More than one animated map side by side . We first select 2 variables that we seek to investigate and create a dataframe that contain both of them. . # Step 1: Select 2 variables that we seek to investigate data = world_data_df[world_data_df[&#39;Indicator Name&#39;].isin([&#39;Unemployment, total (% of total labor force) (national estimate)&#39;,&#39;GDP growth (annual %)&#39;])] # Step 2: Convert the unemployment variable into an employment variable data[&#39;Indicator Value&#39;] = np.where(data[&#39;Indicator Name&#39;] == &#39;Unemployment, total (% of total labor force) (national estimate)&#39;, 100 - data[&#39;Indicator Value&#39;], data[&#39;Indicator Value&#39;]) # Step 3: Encode these variables in terms of quantile for and easier interpration of these variables when compared later on data[&#39;Quantile&#39;] = data.groupby([&#39;Indicator Name&#39;])[&#39;Indicator Value&#39;].transform(lambda x: pd.qcut(x, q=[0,.2,.4,.6,.8,1], labels=[&#39;Q1&#39;,&#39;Q2&#39;,&#39;Q3&#39;,&#39;Q4&#39;,&#39;Q5&#39;])) # Step 4: Make sure the categories are in the string format data[&#39;Quantile&#39;] = data[&#39;Quantile&#39;].astype(&#39;str&#39;) # Step 5: Change certain terms for better visualization later data[&#39;Indicator Name&#39;] = data[&#39;Indicator Name&#39;].map({&#39;GDP growth (annual %)&#39;:&#39;GDP Growth (annual %)&#39;,&#39;Unemployment, total (% of total labor force) (national estimate)&#39;:&#39;Employment (% of total labor force)&#39;}) . Create the visualization to evaluate if GDP Growth is often negatively correlated with Unemployment Rates. . # Step 1: Create a dictionary to map colors to each of the categories color_discrete_dict = {&#39;nan&#39;: &#39;#4d4d4d&#39;, &#39;Q1&#39;: &#39;#d7191c&#39;, &#39;Q2&#39; : &#39;#fdae61&#39;, &#39;Q3&#39; : &#39;#ffffbf&#39;, &#39;Q4&#39; : &#39;#a6d96a&#39;, &#39;Q5&#39; : &#39;#1a9641&#39;} # Step 2: Create a dictionary with order of the legend labels category_orders_dict = {&#39;Quantile&#39; : [&#39;nan&#39;, &#39;Q1&#39;,&#39;Q2&#39;,&#39;Q3&#39;,&#39;Q4&#39;,&#39;Q5&#39;]} # Step 3: Create visualization fig = px.choropleth(data[data[&#39;Year&#39;].isin(list(range(1980,2015)))], # Limit the analysis to years for which that is plenty of data locations=&quot;Country Code&quot;, # Column where country code with 3 letters can be found color=&quot;Quantile&quot;, # Indicator Value is the numerical value we want to examine color_discrete_map = color_discrete_dict, # Dictionary to map colors to each of the categories category_orders= category_orders_dict, # Dictionary with order of the legend labels hover_name=&quot;Country Code&quot;, # Column to add to hover information animation_frame=&#39;Year&#39;, # Show column that will be used in the animation frame facet_col = &#39;Indicator Name&#39;) # Feature that determines the split into 2 columns with different types of info # Step 4: Control the speed of the transitions fig.layout.updatemenus[0].buttons[0].args[1][&#39;frame&#39;][&#39;duration&#39;] = 1000 fig.layout.updatemenus[0].buttons[0].args[1][&#39;transition&#39;][&#39;duration&#39;] = 10 # Step 5: Prevent redundant legend names = set() fig.for_each_trace(lambda trace: trace.update(showlegend=False) if (trace.name in names) else names.add(trace.name)) # Step 6: Prevent &quot;Indicator Name&quot; from appearing as the label of the fact column fig.for_each_annotation(lambda a: a.update(text=a.text.split(&quot;=&quot;)[-1])) # Step 7: Add title to the plot fig.update_layout(title_text=&#39;Growth VS Employment&#39;, title_x=0.5) # Step 8: Syle the map fig.update_geos(showocean=True, oceancolor=&quot;#99cccc&quot;) fig.show() . . . Insight: The map uses divergent colors that help determine which countries are doing better each year. The use of discrete colors help maintain color consistency for each year animation. Moreover, the use quantiles allows for the comparison between variables with different meanings and that often present different orders of magnitude. The animation shows that GDP Growth and Employment are often not correlated. Some countries such as the United States often present good employment metrics despite negative GDP Growth. . 4) Time Series Visualizations (Undirected Graphs of Maps) . The dataset used in this part of the tutorial was created by the author by aggregating data related to 2 decades of flight paths in Brazil. The code used to aggregate such data will not be disclosed here since it would be out of the scope of this tutorial. The CSV files are available at: https://www.gov.br/anac/pt-br/assuntos/dados-e-estatisticas/dados-estatisticos/dados-estatisticos . 4.1) Visualize the flight volume between Brazilian states for 1 year . # Step 1: Limit the analysis to the flight data for 2001 flight_path_df_2001 = flight_path_df[flight_path_df[&#39;Year&#39;]==2001] # Step 2: Create a figure fig = go.Figure() # Step 3: Zip data in a convenient way for later use source_to_dest = zip(flight_path_df_2001[&#39;start_lat&#39;], flight_path_df_2001[&#39;end_lat&#39;], flight_path_df_2001[&#39;start_lon&#39;], flight_path_df_2001[&#39;end_lon&#39;], flight_path_df_2001[&#39;Number Passengers&#39;]) # Step 4: Add line between the airports of origin and destination for slat,dlat, slon, dlon, num_flights in source_to_dest: fig.add_trace(go.Scattergeo(lat = [slat,dlat], lon = [slon, dlon], mode = &#39;lines&#39;, line = dict(width = num_flights/500000, color=&quot;lime&quot;))) # Step 5: Create labels used in the following part cities = flight_path_df_2001[&quot;airport_1&quot;].values.tolist() + flight_path_df_2001[&quot;airport_2&quot;].values.tolist() # Step 6: Plot airports of origin and destination fig.add_trace(go.Scattergeo(lon = flight_path_df_2001[&#39;start_lon&#39;].values.tolist()+flight_path_df_2001[&#39;end_lon&#39;].values.tolist(), lat = flight_path_df_2001[&#39;start_lat&#39;].values.tolist()+flight_path_df_2001[&#39;end_lat&#39;].values.tolist(), hoverinfo = &#39;text&#39;, text = cities, mode = &#39;markers&#39;, marker = dict(size = 10, color = &#39;orangered&#39;, opacity=0.1,))) # Step 7: Style the map fig.update_layout(height=700, width=1000, margin={&quot;t&quot;:100,&quot;b&quot;:0,&quot;l&quot;:0, &quot;r&quot;:0, &quot;pad&quot;:0}, showlegend=False, title_text = &#39;Volume of passengers between 27 Brazilian States&#39;, title_x=0.5, geo = dict(projection_type = &#39;natural earth&#39;,scope = &#39;south america&#39;)) fig.update_geos(showcountries=True, countrycolor=&quot;Black&quot;, showcoastlines=True, coastlinecolor=&quot;RebeccaPurple&quot;, showland=True, landcolor=&quot;#C1E1C1&quot;, showocean=True, oceancolor=&quot;#99cccc&quot;,) # Step 8: Show the map fig.show() . . . Insight: We can see that the number of passengers flying between southern States in Brazil is much higher than the flow in the northern States. . 4.2) Visualize the flight volume between Brazilian states for 2 decades . We will not use animation for this visualization since it is not useful for the sake of certain report types (PDFs without the possibility of animation). Thus, it is also important to consider subplots as a visualization tool. Another reason for not using animation in this case is the fact that the go.Scattergeo does not provide this option. . # Step 1: Create a list with the years for the analysis and determine the number of columns and rows for the visualization years = list(range(2001,2022)) rows, cols = 7, 3 # Step 2: Create subplots fig = make_subplots(rows=rows, cols=cols, subplot_titles = years, specs = [[{&#39;type&#39;: &#39;scattergeo&#39;} for c in np.arange(cols)] for r in np.arange(rows)], horizontal_spacing = 0.01, vertical_spacing = 0.01) # Step 3: Create one visualization for each year using virtually the same code as in the previous part for i, year in enumerate(years): # 3.1) Limit the dataframe to a given year result = flight_path_df[flight_path_df[&#39;Year&#39;] == year] # 3.2) Zip data in a convenient way for later use source_to_dest = zip(result[&#39;start_lat&#39;], result[&#39;end_lat&#39;], result[&#39;start_lon&#39;], result[&#39;end_lon&#39;], result[&#39;Number Passengers&#39;]) # 3.3) Add line between the airports of origin and destination fig.add_trace(go.Scattergeo(lon = result[&#39;start_lon&#39;].values.tolist()+result[&#39;end_lon&#39;].values.tolist(), lat = result[&#39;start_lat&#39;].values.tolist()+result[&#39;end_lat&#39;].values.tolist(), hoverinfo = &#39;text&#39;, text = cities, mode = &#39;markers&#39;, marker = dict(size = 10, color = &#39;orangered&#39;, opacity=0.1,)), row = i//cols+1, col = i%cols+1) # 3.4) Create labels used in the following part for slat,dlat, slon, dlon, num_flights in source_to_dest: fig.add_trace(go.Scattergeo(lat = [slat,dlat], lon = [slon, dlon], mode = &#39;lines&#39;, line = dict(width = num_flights/500000, color=&quot;lime&quot;)), row = i//cols+1, col = i%cols+1) # 3.5) Plot airports of origin and destination cities = result[&quot;airport_1&quot;].values.tolist() + result[&quot;airport_2&quot;].values.tolist() # Step 4) Style the map fig.update_layout(height=1500, width=850, margin={&quot;t&quot;:100,&quot;b&quot;:0,&quot;l&quot;:0, &quot;r&quot;:0, &quot;pad&quot;:0}, showlegend=False, title_text = &#39;Volume of passengers between 27 Brazilian States&#39;, title_x=0.5) fig.update_geos(projection_scale = 4, center = dict(lat=-10.33333334, lon=-53.20000000),showcountries=True, countrycolor=&quot;Black&quot;, showcoastlines=True, coastlinecolor=&quot;RebeccaPurple&quot;, showland=True, landcolor=&quot;#C1E1C1&quot;, showocean=True, oceancolor=&quot;#99cccc&quot;,) # Step 5) Show the map fig.show() . . . Insight: We can see that the volume of passengers flying between Brazilian States has risen significantly throughout the years. However, the COVID-19 pandemic led to a stark decrease in the number of people traveling in 2020 and 2021. . 5) Time Series Visualizations (Movement Tracking) . 5.1) Line plots for route representation . 5.1.1) Line plots representing groups (bird species) . # Create the visualization fig = px.line_mapbox(final_bird_df, lat=&quot;lat&quot;, lon=&quot;lon&quot;, color=&quot;species&quot;, zoom=3, height=500, width = 850) # Style the plot fig.update_layout(mapbox_style=&quot;stamen-terrain&quot;, mapbox_zoom=4.2, mapbox_center_lat = 56, mapbox_center_lon = -2.2, margin={&quot;r&quot;:0,&quot;t&quot;:50,&quot;l&quot;:0,&quot;b&quot;:0}) # Give a title to the visualization fig.update_layout(title_text=&#39;Bird Flying Behavior by Species&#39;, title_x=0.5) fig.show() . . . Insight: We can see that there are 3 species of birds that tend to fly over specific regions. . 5.1.2) Line plots representing individual birds (closer look) . # Limit the analysis to 6 birds that fly in a certain region df_6_birds = final_bird_df[final_bird_df[&#39;bird&#39;].isin([&#39;50&#39;, &#39;51&#39;, &#39;52&#39;, &#39;53&#39;, &#39;54&#39;, &#39;55&#39;, &#39;56&#39;])] # Create the visualization fig = px.line_mapbox(df_6_birds, lat=&quot;lat&quot;, lon=&quot;lon&quot;, color=&quot;bird&quot;, zoom=3, height=500, width = 850) # Style the plot fig.update_layout(mapbox_style=&quot;stamen-terrain&quot;, mapbox_zoom=8, mapbox_center_lat = 56.9, mapbox_center_lon = -2.2, margin={&quot;r&quot;:0,&quot;t&quot;:50,&quot;l&quot;:0,&quot;b&quot;:0}) # Give a title to the visualization fig.update_layout(title_text=&#39;Bird Flying (Individual Behavior)&#39;, title_x=0.5) fig.show() . . . Insight: Birds in a given region seem to have different routes but all seem to pass through a certain region (might be a resting place). . 5.1.3) Line plots with dots for precise locations . # Limit the analysis to 1 bird single_bird_df = final_bird_df[final_bird_df[&#39;bird&#39;]==&#39;55&#39;][[&#39;date_time&#39;, &#39;lat&#39;,&#39;lon&#39;, &#39;alt&#39;]] single_bird_df[&#39;date_time&#39;] = single_bird_df[&#39;date_time&#39;].astype(&#39;str&#39;) # Create the visualization fig = go.Figure() fig.add_trace(go.Scattermapbox( mode = &quot;markers+lines&quot;, lat = single_bird_df.lat.tolist(), lon = single_bird_df.lon.tolist(), marker = {&#39;color&#39;: &quot;blue&quot;, &quot;size&quot;: 7} )) # Style the plot fig.update_layout(margin ={&#39;l&#39;:0,&#39;t&#39;:50,&#39;b&#39;:0,&#39;r&#39;:0}, mapbox = { &#39;center&#39;: {&#39;lat&#39;: 56.8, &#39;lon&#39;: -2.2}, &#39;style&#39;: &quot;stamen-terrain&quot;, &#39;zoom&#39;: 8}, height=500) # Give a title to the visualization fig.update_layout(title_text=&#39;Single Bird Flying Path (Line Plot)&#39;, title_x=0.5) fig.show() . . . Insight: Since the points refer to the location every 15 minutes, further apart points indicate faster speed. Thus, the distance traveled and therefore the speed of the bird varies greatly. The next visualization helps to strenghten this argument. . 5.2) Animated Scatter Plot for Speed Visualization . # Scale the altitude feature since the size argument only accepts positive values scaler = MinMaxScaler() single_bird_df[[&#39;alt&#39;]] = scaler.fit_transform(single_bird_df[[&#39;alt&#39;]]) # Create the visualization fig = px.scatter_mapbox(single_bird_df, lat=&quot;lat&quot;, lon=&quot;lon&quot;, size = &#39;alt&#39;, animation_frame = &#39;date_time&#39;, zoom=8, height=600) fig.update_layout(mapbox_style=&quot;stamen-terrain&quot;) # Control the speed of the transitions fig.layout.updatemenus[0].buttons[0].args[1][&#39;frame&#39;][&#39;duration&#39;] = 200 fig.layout.updatemenus[0].buttons[0].args[1][&#39;transition&#39;][&#39;duration&#39;] = 20 # Give a title to the visualization fig.update_layout(title_text=&#39;Single Bird Flying Path (Animated Scatter Plot)&#39;, title_x=0.5) fig.show() . . . Insight: We can see that the altitude of the bird varies widely during its flight (as seen by the size of the dot varying). The speed of the animal also varies significantly during the flight, as we suspected. . 5.3) Density Plot for Closeness &amp; Altitude Visualization . 5.3.1) Density Plot for Closeness Visualization . Let us consider the density of points at Rathlin Island . # Create the visualization fig = px.density_mapbox(rathlin_island, lat=&#39;lat&#39;, lon=&#39;lon&#39;, zoom = 12, center=dict(lat=55.276, lon=-6.19), height=600, mapbox_style=&quot;stamen-terrain&quot;) # Give a title to the plot fig.update_layout(title_text=&#39;Density Plot for Closeness Visualization&#39;, title_x=0.5, margin ={&#39;l&#39;:0,&#39;t&#39;:50,&#39;b&#39;:0,&#39;r&#39;:0}) fig.show() . . . Insight: The south of the island is where the birds are most often found. . 5.3.2) Density Plot for Altitude Visualization . # Create the visualization fig = px.density_mapbox(rathlin_island, lat=&#39;lat&#39;, lon=&#39;lon&#39;, z=&#39;alt&#39;, zoom = 12, center=dict(lat=55.276, lon=-6.19), height=600, mapbox_style=&quot;stamen-terrain&quot;) # Give a title to the plot fig.update_layout(title_text=&#39; Density Plot for Altitude Visualization&#39;, title_x=0.5, margin ={&#39;l&#39;:0,&#39;t&#39;:50,&#39;b&#39;:0,&#39;r&#39;:0}) fig.show() . . . Insight: Birds tend to fly at higher altitudes when in the south of the Island. . 5.3.3) Animated Density Plot for Altitude Visualization . # Create the visualization fig = px.density_mapbox(rathlin_island, lat=&#39;lat&#39;, lon=&#39;lon&#39;, z=&#39;alt&#39;, animation_frame = rathlin_island[&#39;date_time&#39;].astype(&#39;str&#39;), zoom = 12, center=dict(lat=55.276, lon=-6.19), height=600, mapbox_style=&quot;stamen-terrain&quot;, range_color = [rathlin_island[&#39;alt&#39;].min(),rathlin_island[&#39;alt&#39;].max()]) # Step 4: Control the speed of the transitions fig.layout.updatemenus[0].buttons[0].args[1][&#39;frame&#39;][&#39;duration&#39;] = 50 fig.layout.updatemenus[0].buttons[0].args[1][&#39;transition&#39;][&#39;duration&#39;] = 15 # Step 5: Give a title to the plot fig.update_layout(title_text=&#39;Animated Density Plot for Altitude Visualization&#39;, title_x=0.5, margin ={&#39;l&#39;:0,&#39;t&#39;:50,&#39;b&#39;:0,&#39;r&#39;:0}) fig.show() . . . Insight: This visualization might be a bit confusing at first since we can only see purple density plots. We could think that this contradicts the previous visualization where yellow represents birds that fly higher than others. This happens since this visualization considers the color as a representation of birds at each frame. Since birds fly together, we are bound to see the same color representing their altitudes at each point in time. If we had different colors, we would be able to affirm that many of these birds do not fly together, even when their latitudes and longitudes are approximately the same. .",
            "url": "https://leonardodecastro.github.io/data_science_blog/map%20visualization/choropleth/continuous%20color%20schemes/divergent%20color%20schemes/simultaneous%20animated%20maps/undirected%20graphs/subplots%20for%20time%20visualization/line%20plots/scatter%20plots%20and%20density%20plots/2022/12/02/Visualization-Maps-Time-Series.html",
            "relUrl": "/map%20visualization/choropleth/continuous%20color%20schemes/divergent%20color%20schemes/simultaneous%20animated%20maps/undirected%20graphs/subplots%20for%20time%20visualization/line%20plots/scatter%20plots%20and%20density%20plots/2022/12/02/Visualization-Maps-Time-Series.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "SQL with Google Colab Tutorial 1",
            "content": "1) Aknowledge the sources used for this tutorial . This post was created using information from 2 sources. The first post explains how to use PostgreSQL with Google Colab. The second source is a tutorial by at Data.World. The links to these sources are found below: . https://thivyapriyaa.medium.com/setting-up-postgresql-on-google-colab-4d02166939fc | https://data.world/classrooms/guide-to-data-analysis-with-sql-and-datadotworld/workspace/file?filename=01_select_data.md | . 2) Import libraries . import psycopg2 import pandas as pd pd.options.mode.chained_assignment = None # default=&#39;warn&#39; . 3) Install PostgreSQL . Colab is a linux environment. Thus, we can use linux commands to install PostgreSQL on it . You might need to run the following cell twice if the database is not created when you run it just once. . !sudo apt-get -y -qq update # Update the PostgreSQL in case they are not !sudo apt-get -y -qq install postgresql # Install PostgreSQL !sudo service postgresql start # Start the PostgreSQL service # Setup a password `postgres` for username `postgres` !sudo -u postgres psql -U postgres -c &quot;ALTER USER postgres PASSWORD &#39;postgres&#39;;&quot; # Setup a database with name `tfio_demo` to be used !sudo -u postgres psql -U postgres -c &#39;DROP DATABASE IF EXISTS tfio_demo;&#39; # Drop databases if they exist !sudo -u postgres psql -U postgres -c &#39;CREATE DATABASE tfio_demo;&#39; # Drop databases if they exist . * Starting PostgreSQL 10 database server ...done. ALTER ROLE DROP DATABASE CREATE DATABASE . Setup necessary environmental variables . %env DB_NAME=tfio_demo %env DB_HOST=localhost %env DB_PORT=5432 %env DB_USER=postgres %env DB_PASS= postgres . env: DB_NAME=tfio_demo env: DB_HOST=localhost env: DB_PORT=5432 env: DB_USER=postgres env: DB_PASS=postgres . 4) Create tables within the database . 4.1) Drop tables if they already exist . !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS visitation;&quot; #### Table 2: Cats VS Dogs !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS animals;&quot; #### Table 3: Counties !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS counties;&quot; #### Table 4: Products !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS products;&quot; #### Table 5: Sales !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS sales;&quot; #### Table 6: Sales 2016 !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS sales2016;&quot; #### Table 7: Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS stores;&quot; #### Table 8: Convenience Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS convenience;&quot; . 4.2) Create tables . !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE visitation(visitation_index SERIAL PRIMARY KEY,year INT,visitor_count INT,total_visitors INT);&quot; #### Table 2: Cats VS Dogs !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE animals(animal_index SERIAL PRIMARY KEY, location TEXT, region TEXT, number_of_households_in_1000 INT, percentage_of_households_with_pets DECIMAL(5,3), number_of_pet_households_in_1000 INT, percentage_of_dog_owners DECIMAL(5,3), dog_owning_households_1000s INT, mean_number_of_dogs_per_household DECIMAL(5,3), dog_population_in_1000 INT, percentage_of_cat_owners DECIMAL(5,3), cat_owning_households INT, mean_number_of_cats DECIMAL(5,3), cat_population INT);&quot; #### Table 3: Counties !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE counties(counties_index SERIAL PRIMARY KEY, county TEXT, county_number INT, population INT);&quot; #### Table 4: Products !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE products(products_index SERIAL PRIMARY KEY, item_no INT, category_name TEXT, item_description TEXT, vendor INT, vendor_name TEXT, bottle_size INT, pack INT, inner_pack INT, age INT, proof INT, list_date DATE, upc BIGINT, scc BIGINT, bottle_price MONEY, shelf_price DECIMAL, case_cost DECIMAL);&quot; #### Table 5: Sales !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE sales(sales_index SERIAL PRIMARY KEY, date DATE, convenience_store TEXT, store INT, county_number INT, county TEXT, category TEXT, category_name TEXT, vendor_no INT, vendor TEXT, item INT, description TEXT, pack INT, liter_size INT, state_btl_cost MONEY, btl_price MONEY, bottle_qty INT, total DECIMAL);&quot; #### Table 6: Sales 2016 !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE sales_2016(sales2016_index SERIAL PRIMARY KEY, invoice_item_number TEXT, date DATE, store_number INT, store_name TEXT, address TEXT, city TEXT, zip_Code TEXT, store_location TEXT, county_number TEXT, county TEXT, category TEXT, category_name TEXT, vendor_number TEXT, vendor_name TEXT, item_number INT, item_description TEXT, pack INT, bottle_volume_ml INT, state_bottle_cost DECIMAL, state_bottle_retail DECIMAL, bottles_sold INT, sale_dollars DECIMAL, volume_sold_liters DECIMAL, volume_sold_gallons DECIMAL);&quot; #### Table 7: Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE stores(stores_index SERIAL PRIMARY KEY, store INT, name TEXT, store_status TEXT, store_address TEXT, address_info TEXT);&quot; #### Table 8: Convenience Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE convenience(convenience_index SERIAL PRIMARY KEY, store INT,county TEXT);&quot; . 5) Populate the tables . 5.1) Import CSV files . #### 5.1) Import the csv for the &quot;visitation&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/visitation.csv -nv #### 5.2) Import the csv for the &quot;animals&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/animals.csv -nv #### 5.3) Import the csv for the &quot;counties&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/counties.csv -nv #### 5.4) Import the csv for the &quot;products&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/products.csv -nv #### 5.5) Import the csv for the &quot;sales&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/sales.zip -nv !unzip &#39;/content/sales.zip&#39; #### 5.6) Import the csv for the &quot;sales2016&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/sales_2016.zip -nv !unzip &#39;/content/sales_2016.zip&#39; #### 5.7) Import the csv for the &quot;stores&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/stores.csv -nv #### 5.8) Import the csv for the &quot;convenience&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/convenience.csv -nv . 5.2) Populate the tables . #### 5.1) Populate the &quot;visitation&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY visitation(year, visitor_count, total_visitors) FROM &#39;visitation.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.2) Populate the &quot;animals&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY animals(location, region, number_of_households_in_1000, percentage_of_households_with_pets, number_of_pet_households_in_1000, percentage_of_dog_owners, dog_owning_households_1000s, mean_number_of_dogs_per_household , dog_population_in_1000, percentage_of_cat_owners, cat_owning_households, mean_number_of_cats , cat_population) FROM &#39;animals.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.3) Populate the &quot;counties&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY counties(county, county_number, population) FROM &#39;counties.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.4) Populate the &quot;products&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY products(item_no, category_name, item_description, vendor, vendor_name, bottle_size, pack, inner_pack, age, proof, list_date, upc, scc, bottle_price, shelf_price, case_cost) FROM &#39;products.csv&#39; ( format csv, header, delimiter &#39;;&#39;, encoding &#39;win1252&#39;, null &#39;&#39;);&quot; #### 5.5) Populate the &quot;sales&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY sales(date, convenience_store, store, county_number, county, category, category_name, vendor_no, vendor, item, description, pack, liter_size, state_btl_cost, btl_price, bottle_qty, total) FROM &#39;sales.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.6) Populate the &quot;sales2016&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY sales_2016(invoice_item_number, date, store_number, store_Name, address, city, zip_code, store_location, county_number, county, category, category_name, vendor_number, vendor_name, item_number, item_description, pack, bottle_volume_ml, state_bottle_cost, state_bottle_retail, bottles_sold, sale_dollars, volume_sold_liters, volume_sold_gallons) FROM &#39;sales_2016.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.7) Populate the &quot;stores&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY stores(store, name, store_status, store_address, address_info) FROM &#39;stores.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.8) Populate the &quot;convenience&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY convenience(store, county) FROM &#39;convenience.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; . 6) Practice SQL . The introduction to the sub-sections of part 6 were extracted from the second source referenced in the first part of this script. . 6.1) SELECT, WHERE &amp; ORDER BY commands . When accessing data using SQL, Structured Query Language, the two foundational parts of the command sequence are SELECT and FROM. Using SELECT, you choose the information you want to include in your report. FROM identifies the source table or file name from which to retrieve or calculate that information. This structure will look like: . SELECT (desired data here) FROM (table name here) . 6.1.1) Select all columns using asterisk (*). . Here we select all columns from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT * FROM visitation&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head() . visitation_index year visitor_count total_visitors . 0 1 | 1944 | 1409 | 15431947 | . 1 2 | 1945 | 3205 | 15431947 | . 2 3 | 1946 | 10037 | 15431947 | . 3 4 | 1947 | 28652 | 15431947 | . 4 5 | 1948 | 45670 | 15431947 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.2) Select certain columns of a given table. . Here we select the columns year and vistor_count from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT visitation.year, visitation.visitor_count FROM visitation; &quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head() . year visitor_count . 0 1944 | 1409 | . 1 1945 | 3205 | . 2 1946 | 10037 | . 3 1947 | 28652 | . 4 1948 | 45670 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.3) Create aggregate measures (SUM). . Here we calculate the sum of all values for the column vistor_count from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT SUM(visitation.visitor_count) FROM visitation; &quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head(2) . sum . 0 15431947 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.4) Minimum, Maximum and Average Metrics. . Here we calculate the minimum, average and maximum values for the column vistor_count from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT MIN(visitation.visitor_count), AVG(visitation.visitor_count), MAX(visitation.visitor_count) FROM visitation;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head(2) . min avg max . 0 1409 | 214332.597222222222 | 398583 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.5) WHERE and ORDER BY command . Here we select the columns year and visitor_count from the visitation table. The selection is limited to visitor_count values equal or greater than 300000. The results are organized by year in a descending order. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT visitation.year, visitation.visitor_count FROM visitation WHERE visitation.visitor_count &gt;= 300000 ORDER BY visitation.year DESC;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head() . year visitor_count . 0 2015 | 381747 | . 1 2014 | 314102 | . 2 2013 | 316953 | . 3 2011 | 361862 | . 4 2010 | 372330 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.6) Summary . The following summary is provided in the second article that was referenced in part 1: . SELECT and FROM are the most essential parts of every query. | Selected data may request all (*), specific columns or calculated values. | Formal referencing of data includes the sourcing table (table.data). | WHERE is a valuable tool for filtering data for the desired output. | ORDER BY sorts the query results, ascending (ASC) is the default. | . 6.2) FILTER &amp; GROUP commands . Building on the basics of selecting desired data, add criteria to further refine the information retrieved for your report using conditional operators. These include command words such as AND, OR, NOT, IN and BETWEEN. They are added to the SQL query within the components of a WHERE clause, and are placed after the SELECT and FROM portions of the query. This structure will look like: . SELECT (desired data here) FROM (table name here) WHERE (filtering criteria) . 6.2.1) LIMIT command . Here we select the columns location, number_of_households_in_1000 and number_of_pet_households_in_1000 from the animals table. The selection is are organized by number_of_pet_households_in_1000 in a descending order. The display is limited to the 10 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT animals.location, animals.number_of_households_in_1000, animals.number_of_pet_households_in_1000 FROM animals ORDER BY animals.number_of_pet_households_in_1000 DESC LIMIT 10;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . location number_of_households_in_1000 number_of_pet_households_in_1000 . 0 California | 12974 | 6865 | . 1 Texas | 9002 | 5265 | . 2 Florida | 7609 | 4138 | . 3 New York | 7512 | 3802 | . 4 Pennsylvania | 5172 | 2942 | . 5 Ohio | 4661 | 2677 | . 6 Illinois | 5026 | 2602 | . 7 Michigan | 3804 | 2108 | . 8 Georgia | 3798 | 2093 | . 9 North Carolina | 3701 | 2089 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.2) Multiple WHERE commands . Here we select the columns location, mean_number_of_dogs_per_household and mean_number_of_cats from the animals table. The selection considers mean_number_of_dogs_per_household and mean_number_of_cats equal or greater than 2. The results are organized by location. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT animals.location, animals.mean_number_of_dogs_per_household, animals.mean_number_of_cats FROM animals WHERE animals.mean_number_of_dogs_per_household &gt;= 2 AND animals.mean_number_of_cats &gt;= 2 ORDER BY animals.location LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . location mean_number_of_dogs_per_household mean_number_of_cats . 0 Arkansas | 2.000 | 2.300 | . 1 New Mexico | 2.000 | 2.200 | . 2 Oklahoma | 2.100 | 2.200 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.3) BETWEEN command . Here we select the columns location, mean_number_of_cats and cat_population from the animals table. The selection considers mean_number_of_cats between 2.2 and 4. The results are organized by cat_population. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT animals.location, animals.mean_number_of_cats, animals.cat_population FROM animals WHERE animals.mean_number_of_cats BETWEEN 2.2 AND 4 ORDER BY animals.cat_population DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . location mean_number_of_cats cat_population . 0 Texas | 2.200 | 5565 | . 1 Ohio | 2.400 | 3786 | . 2 Indiana | 2.200 | 1912 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.4) AS command . Here we select the columns region together with the sums of number_of_pet_households_in_1000, dog_population_in_1000, cat_population and the sum of the last two sums from the animals table grouped by region. These sum variables were named total_pet_households, dog_total, cat_total and total_companion_pets. The results are organized by total_pet_households in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT animals.region, SUM(animals.number_of_pet_households_in_1000) AS total_pet_households, SUM(animals.dog_population_in_1000) AS dog_total, SUM(animals.cat_population) AS cat_total, (SUM(animals.dog_population_in_1000) + SUM(animals.cat_population)) AS total_companion_pets FROM animals GROUP BY animals.region ORDER BY total_pet_households DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . region total_pet_households dog_total cat_total total_companion_pets . 0 Central | 18438 | 20677 | 20332 | 41009 | . 1 South | 16886 | 20253 | 18356 | 38609 | . 2 East | 15991 | 13549 | 19256 | 32805 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.5) GROUP BY + HAVING command . Here we select the columns region and AVG(percentage_of_households_with_pets) from the animals table grouped by region. Notice that we keep the regions with an AVG(percentage_of_households_with_pets) greater than 55. Thus, HAVING is used with the GROUP BY command. The results are organized by region in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT animals.region, AVG(animals.percentage_of_households_with_pets) FROM animals GROUP BY animals.region HAVING AVG(animals.percentage_of_households_with_pets) &gt; 55 ORDER BY animals.region DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . region avg . 0 West | 59.9545454545454545 | . 1 South | 57.0909090909090909 | . 2 Central | 57.0615384615384615 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.6) Summary . The following summary is provided in the second article that was referenced in part 1: . WHERE provides an opportunity to narrow the criteria for queries. | Filters may be created with a variety of conditional commands. | Compound conditional filters may be used in queries. | GROUP BY aggregates information based on categorical dimensions. | HAVING criteria may be applied to the groups that are aggregated. | . 6.3) Aggregating and Grouping Data . Aggregation SQL functions bring clarity and depth to queries, which include DISTINCT, COUNT, GROUP BY and HAVING. These commands add to the filtering accomplished by the WHERE clause, and enable viewing data in groups, segments or other organized levels. DISTINCT and COUNT are often used in the SELECT statement to create and quantify aggregation. By contrast, GROUP BY and HAVING are placed after the WHERE clause. As you consider using these tools in your query, it is important to be consistent in the level of aggregation requested in one query. The following shows the appropriate order for the command tools in your new query: . SELECT DISTINCT (desired column list) FROM (table name here) WHERE (filtering criteria) GROUP BY (data_name) HAVING (additional filter) . 6.3.1) DISTINCT, ROUND, COUNT and Multiple GROUP BY commmands . Here we select the columns item, description, qty_sold, avg_transaction_price and total_sold from the products table. Notice that the last 3 variables mentioned above refer to COUNT(sales.item), ROUND(AVG(sales.total),2) and avg_transaction_price. The analysis is limited to unique combinations of items and descriptions. The selected variables were grouped by item and then description. The results are organized by qty_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT DISTINCT sales.item, sales.description, COUNT(sales.item) as qty_sold, ROUND(AVG(sales.total),2) as avg_transaction_price, SUM(sales.total) as total_sold FROM sales GROUP BY sales.item, sales.description ORDER BY qty_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . item description qty_sold avg_transaction_price total_sold . 0 11788 | Black Velvet | 31904 | 403.19 | 12863376.81 | . 1 36308 | Hawkeye Vodka | 31105 | 172.99 | 5380753.20 | . 2 43336 | Captain Morgan Original Spiced | 18129 | 192.94 | 3497803.08 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Here we select the columns county, qty_sold and total_sold from the sales table. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The analysis is limited to unique county names. Moreover, the description columns must be either &#39;Black Velvet&#39; or &#39;Hawkeye Vodka&#39;. The aggregate measure were created by groupbing the table by county if the item count per group exceeded 10000. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . 6.3.2) IN commmand . Here we select the columns county, qty_sold and total_sold from the products table. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The selected variables were grouped by county when the count of items was greater than 10000. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT DISTINCT sales.county, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales WHERE sales.description IN(&#39;Black Velvet&#39;, &#39;Hawkeye Vodka&#39;) GROUP BY sales.county HAVING (COUNT(sales.item)) &gt; 10000 ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county qty_sold total_sold . 0 Polk | 28058 | 4114463.32 | . 1 Linn | 12746 | 2366315.91 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Notice that you cannot replace (COUNT(sales.item)) by qty_sold after the HAVING command since it is considered part of the GROUP BY command. Since this command is not &quot;over&quot;, the variable qty_sold does not exist yet. However, once the GROUP BY + HAVING commands are used, the variable total_sold can be used in the ORDER BY command. . 6.3.3) COUNT(*) and CAST commmands . Here we select the columns vendor_name, products_offered and avg_price from the products table. Notice that the last 2 variables mentioned above refer to the count of all instances using COUNT(*) and the rounded average of the feature bottle_price. The selected variables were grouped by vendor_name. The results are organized by products_offered in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT products.vendor_name, COUNT(*) AS products_offered, ROUND(AVG(CAST(products.bottle_price AS DECIMAL)),2) AS avg_price FROM products GROUP BY products.vendor_name ORDER BY products_offered DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . vendor_name products_offered avg_price . 0 Jim Beam Brands | 925 | 11.54 | . 1 Diageo Americas | 906 | 18.16 | . 2 Pernod Ricard Usa/austin Nichols | 597 | 19.80 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; The CAST command is required so that the bottle price can be use without the monetary sign ($). . 6.3.4) LEFT JOIN + USING commands . Here we select the columns county, population, qty_sold and total_sold from the join of the sales and counties tables using the county column. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The analysis is limited to unique combinations of counties and population. The selected variables were grouped by county and then population, when the county population exceeded 150000. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT DISTINCT sales.county, counties.population, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales LEFT JOIN counties USING(county) WHERE description IN(&#39;Black Velvet&#39;, &#39;Hawkeye Vodka&#39;) GROUP BY sales.county, counties.population HAVING counties.population &gt; 150000 ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county population qty_sold total_sold . 0 Polk | 430640 | 28058 | 4114463.32 | . 1 Linn | 211226 | 12746 | 2366315.91 | . 2 Scott | 165224 | 5471 | 732618.98 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Notice that there will always be unique combinations of counties and populations since any given county only has one population value. In other types of examples, the constraint of finding unique combinations of variables might be an issue that requires more thought. . 6.3.5) LEFT JOIN + ON commands . Here we have the very same example as the previous query. However, we use ON instead of USING as a command. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT DISTINCT sales.county, counties.population, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales LEFT JOIN counties ON sales.county = counties.county WHERE description IN(&#39;Black Velvet&#39;, &#39;Hawkeye Vodka&#39;) GROUP BY sales.county, counties.population HAVING counties.population &gt; 150000 ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county population qty_sold total_sold . 0 Polk | 430640 | 28058 | 4114463.32 | . 1 Linn | 211226 | 12746 | 2366315.91 | . 2 Scott | 165224 | 5471 | 732618.98 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.3.6) NOT IN command . Here we select the columns county, qty_sold and total_sold from the sales table. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The analysis is limited to unique combinations of counties considering descriptions that include neither &#39;Black Velvet&#39; nor &#39;Hawkeye Vodka&#39; and considering the counties of &#39;Polk&#39;, &#39;Linn&#39;, &#39;Scott&#39; . The selected variables were grouped by county. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT DISTINCT sales.county, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales WHERE sales.description NOT IN(&#39;Black Velvet&#39;,&#39;Hawkeye Vodka&#39;) AND sales.county IN(&#39;Polk&#39;, &#39;Linn&#39;, &#39;Scott&#39;) GROUP BY sales.county ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county qty_sold total_sold . 0 Polk | 533688 | 82282998.47 | . 1 Linn | 238524 | 32093731.58 | . 2 Scott | 182849 | 27170229.69 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.3.7) Summary . The following summary is provided in the second article that was referenced in part 1: . DISTINCT and GROUP BY provide insights into aggregated slices of the data. | COUNTing the quantity of a group member can provide valuable insight. | Compound conditions can be joined by AND in queries. | HAVING further filters aggregated data, in addition to filtering applied to raw data by the WHERE clause. | . 6.4) JOIN command . Just as we organize belongings into separate storage areas, data needed for analysis is often stored in multiple locations. SQL enables you to easily combine data from multiple resources, if you have a unique identifier to bridge between the data tables. Connecting data sources is established with the FROM clause, identifying the source tables and the fields which are candidates for the unique connection. We’ll begin with the INNER JOIN, which returns only the records that match exactly from both tables. The basic command frame for the SELECT statement remains the same, with some new additions. When referencing columns within a JOIN query, use the formal labeling for column names, meaning table name together with column name separated by a period, for clear identification. The structure to JOIN two tables within the FROM clause is accomplished as follows: . FROM (primary table name here) INNER JOIN (secondary table here) ON (primary_table.field_from_primary = secondary_table.field_from_secondary) . 6.4.1) INNER JOIN command . Here we select the columns store_number, name, store_address and total_sold from the join of the sales2016 and stores tables. Notice that the last variable mentioned above refers to SUM(sales2016.sale_dollars). The INNER JOIN command used the columns store_number and store to merge the tables. The selected variables were grouped by store_number, name and store_address. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT sales_2016.store_number, stores.name, stores.store_address, SUM(sales_2016.sale_dollars) AS total_sold FROM sales_2016 INNER JOIN stores ON sales_2016.store_number = stores.store GROUP BY sales_2016.store_number, stores.name, stores.store_address ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . store_number name store_address total_sold . 0 2633 | Hy-vee #3 / Bdi / Des Moines | 3221 Se 14th St nDes Moines, IA 503200000 n(41... | 7904425.39 | . 1 4829 | Central City 2 | 1501 Michigan Ave nDes Moines, IA 50314 n(41.6... | 7156755.00 | . 2 2512 | Hy-vee Wine and Spirits / Iowa City | 1720 Waterfront Dr nIowa City, IA 522400000 n(... | 3400203.01 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.2) Divide one column by another (feature creation) . Here we select the columns county, total_sold, population and per_capita_spend from the join of the sales2016 and counties tables. Notice that the the variables total_sold and per_capita_spend mentioned above refer to SUM(sales2016.sale_dollars) and ROUND((SUM(sales2016.sale_dollars)/(counties.population)),2). The INNER JOIN command used the column county to merge the tables. The selected variables were grouped by county and population. The results are organized by per_capita_spend in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT sales_2016.county, SUM(sales_2016.sale_dollars) AS total_sold, counties.population, ROUND((SUM(sales_2016.sale_dollars)/(counties.population)),2) AS per_capita_spend FROM sales_2016 INNER JOIN counties USING(county) GROUP BY sales_2016.county, counties.population ORDER BY per_capita_spend DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county total_sold population per_capita_spend . 0 Dickinson | 3112712.41 | 16667 | 186.76 | . 1 Polk | 42400328.31 | 430640 | 98.46 | . 2 Cerro Gordo | 3617023.05 | 44151 | 81.92 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.3) COUNT + DISTINCT commands . Here we select the columns county, qty_stores, total_sales, county_population and num_people_per_store from the join of the sales_2016 and counties tables. Notice that the the variables qty_stores, total_sales and num_people_per_store mentioned above refer to COUNT(DISTINCT sales_2016.store_number), SUM(sales_2016.sale_dollars) and (counties.population/(COUNT(DISTINCT sales_2016.store_number))). The INNER JOIN command used the column county to merge the tables. Notice that the selection is limited to the counties of &#39;Dickinson&#39;, &#39;Polk&#39;, &#39;Johnson&#39; and &#39;Cerro Gordo&#39;. The selected variables were grouped by county and then population. The results are organized by total_sales in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT sales_2016.county, COUNT(DISTINCT sales_2016.store_number) AS qty_stores, SUM(sales_2016.sale_dollars) AS total_sales, counties.population AS county_population, (counties.population/(COUNT(DISTINCT sales_2016.store_number))) AS num_people_per_store FROM sales_2016 INNER JOIN counties USING(county) WHERE sales_2016.county IN(&#39;Dickinson&#39;, &#39;Polk&#39;, &#39;Johnson&#39;, &#39;Cerro Gordo&#39; ) GROUP BY sales_2016.county, counties.population ORDER BY total_sales DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county qty_stores total_sales county_population num_people_per_store . 0 Polk | 188 | 42400328.31 | 430640 | 2290 | . 1 Johnson | 50 | 10509392.26 | 130882 | 2617 | . 2 Cerro Gordo | 20 | 3617023.05 | 44151 | 2207 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.4) IS NOT NULL command . Here we select the columns county, store_number, store_name, qty_sold, avg_sale_price and total_sold from the join of the sales_2016 and convenience tables. Notice that the the 3 lasts variables mentioned above refer to COUNT(sales_2016.sale_dollars), ROUND(AVG(sales_2016.sale_dollars),2) and SUM(sales_2016.sale_dollars). The INNER JOIN command used the columns store_numbers and store to merge the tables. Notice that the selection is limited stores values that are not NULL and to the counties of &#39;Dickinson&#39;, &#39;Polk&#39; and &#39;Johnson&#39;. The selected variables were grouped by county, store_number and store_names. The results are organized by county and then total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT sales_2016.county, sales_2016.store_number, sales_2016.store_name, COUNT(sales_2016.sale_dollars) AS qty_sold, ROUND(AVG(sales_2016.sale_dollars),2) AS avg_sale_price, SUM(sales_2016.sale_dollars) AS total_sold FROM sales_2016 INNER JOIN convenience ON sales_2016.store_number = convenience.store WHERE convenience.store IS NOT NULL AND sales_2016.county IN(&#39;Johnson&#39;,&#39;Dickinson&#39;, &#39;Polk&#39;) GROUP BY sales_2016.county, sales_2016.store_number, sales_2016.store_name ORDER BY sales_2016.county, total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county store_number store_name qty_sold avg_sale_price total_sold . 0 Dickinson | 4576 | THE BOONEDOCKS | 823 | 92.26 | 75929.34 | . 1 Dickinson | 4582 | Pronto / Spirit Lake | 634 | 89.43 | 56698.15 | . 2 Dickinson | 4387 | KUM &amp; GO #117 / SPIRIT LAKE | 293 | 99.13 | 29045.78 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.5) CASE + COALESCE commands . We begin the query by considering the column store_address. We get the position of the term &quot;IA&quot;. Then, we consider that if the position 3 string to the right of IA plus 1 position is smaller than &#39;1&#39;, then this value should be considered as &#39;no zip&#39;. Notice that this statement is useful in the case of &quot;Dehner Distillery&quot; where no zip code is available. Instead, in this case, we have &quot; n&quot; following the word IA. Since &quot; n&quot; is smaller than &quot;1&quot;, then we have &#39;no zip&#39; associated with this situation. In other cases, such as when the name is &#39;Louisiana Spirits LLC&#39;, then there is a zip number. This number goes from 3 positions to the right of &quot;IA&quot; up until (3 + 5) positions to the right of &quot;IA&quot;. In usch circumstances, the value extracted is the zip code number. These values are saved in column called zipcode. . Other columns are also selected. including name, store_id and store_status. Another piece of information is also extracted from the store_address column by considering the first string up until 1 position to the right of &quot;IA&quot;. This piece of information corresponds to the street address. COALESCE is used to get the first non-null argument. . Here we selection is made from the join of the stores and sales tables. The LEFT JOIN command used the column store. Notice that the selection is limited to instances with store_status equal to &quot;A&quot; and total sales equal to null. The results are organized by zipcode in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT CASE WHEN SUBSTRING(store_address,(POSITION(&#39;IA&#39; in stores.store_address)+3),1) &lt; &#39;1&#39; THEN &#39;no zip&#39; ELSE SUBSTRING(store_address,(POSITION(&#39;IA&#39; in stores.store_address)+3),5) END AS zipcode, stores.name, stores.store AS store_id, store_status, SUBSTRING(store_address,1,(POSITION(&#39;IA&#39; in stores.store_address)+1)) AS st_address, COALESCE(sales.total, 0) AS sales_totals FROM stores LEFT JOIN sales USING (store) WHERE store_status = &#39;A&#39; AND sales.total IS NULL ORDER BY zipcode DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . zipcode name store_id store_status st_address sales_totals . 0 no zip | Dehner Distillery | 9919 | A | 7500, University Ave nClive, IA | 0 | . 1 70650 | Louisiana Spirits LLC | 9920 | A | 20909, South I-10 Frontage Rd nLacassine, IA | 0 | . 2 52804 | Sub Xpress &amp; Gas | 4526 | A | 4307 W Locust St nDavenport, IA | 0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; The following is the sytax for using CASE: . CASE &emsp; WHEN (condition_1) THEN (result_1) &emsp; WHEN (condition_2) THEN (result_2) &emsp; [WHEN ...] &emsp; [ELSE else_result] END . 6.4.6) Summary . The following summary is provided in the second article that was referenced in part 1: . INNER JOIN is the most common joining type, and is the default assumed, if you only include the command word JOIN in your query. | ON is the phrase to specify the matching unique identifier in both tables. | If the matching key columns in both tables have exactly matching names USING(column_name) may be used instead of the ON command structure. | When combining tables, the column or field names must include a way for SQL to correctly identify their source table. This is accomplished by providing the full table name or assigning an alias. | Appropriate use of WHERE clause filters can enable queries to narrow the focus of the inquiry and search rapidly through very large datasets quickly containing millions of records. | As shown in the final query, there are many tools for manipulating text fields and including specific parts in your reports as you answer stakeholder’s questions. Some of these essential tools are SUBSTRING, POSITION, COALESCE and CASE statements, which are all coming in the next sections. | .",
            "url": "https://leonardodecastro.github.io/data_science_blog/postgresql%20wit%20google%20colab/sql/2022/11/15/SQL-Tutorial-1.html",
            "relUrl": "/postgresql%20wit%20google%20colab/sql/2022/11/15/SQL-Tutorial-1.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "K-Nearest Neighbours (Hyperparameter Tuning)",
            "content": "1) Import libraries . 1.1) Import libraries . import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import cross_validate from sklearn.model_selection import train_test_split from yellowbrick.classifier import ROCAUC, ConfusionMatrix, ClassificationReport pd.options.mode.chained_assignment = None . 2) Exploratory Data Analysis (EDA) . For the sake of this tutorial, we will not engage in extensive EDA. However, the visualization posts bring very detailed EDA analyses. . 2.1) Load File . Original data source: https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ . data = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/winequality-white.csv&#39;) . 2.2) Create a definition for Good Wine . data[&#39;Good Wine?&#39;] = np.where(data[&#39;quality&#39;] &lt; 7, 0, 1) . 2.3) Drop original quality feature . data.drop(&#39;quality&#39;, axis=1, inplace = True) . 3) Split and scale data . Since we will use cross validation, there is not need for a validation set. . 3.1) Split the data frame into the training, validation and test sets . # Determine X and y X = data.drop(&#39;Good Wine?&#39;, axis = 1) y = data[&#39;Good Wine?&#39;] # Split dataset (use the argument stratify to make sure we keep a reasonable number of both classes in the training and test sets) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify = y) . 3.2) Scale the dataset . # Select a type of scaler scaler = StandardScaler() # Apply fit_transform on the training set and apply it to the test set X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) . 4) Hyperparameter tuning . 4.1) Calculate a wide range of metrics for model evaluation . # Step 1: Create a dictionary to store the metrics for different k values scores_dict = {} # Step 2: Train model for different k values (number of neighbours) for k in range(1, 200): # Part 1: Select classifier object knn = KNeighborsClassifier(n_neighbors=k) # Part 2: Determine the metrics that will be analyzed scoring = {&#39;accuracy&#39;: &#39;accuracy&#39;, &#39;precision&#39;: &#39;precision&#39;, &#39;recall&#39;: &#39;recall&#39;, &#39;f1&#39;: &#39;f1&#39;} # Part 3: Calculate metrics using cross-validation scores = cross_validate(knn, X_train_scaled, y_train, cv=5, scoring=scoring) # Part 4: Extract the mean of each one of the metrics scores_dict[k] = {&#39;accuracy&#39;: scores[&#39;test_accuracy&#39;].mean(), &#39;precision&#39;: scores[&#39;test_precision&#39;].mean(), &#39;recall&#39;: scores[&#39;test_recall&#39;].mean(), &#39;f1&#39;: scores[&#39;test_f1&#39;].mean()} # Step 3: Create a dataframe with model metrics metrics_df = pd.DataFrame.from_dict(scores_dict, orient=&#39;index&#39;).rename_axis(&#39;K&#39;).reset_index() . 4.2) Plot metrics for different k values . # Step 1: Melt the dataframe to allow for an easy way to plot with seaborn metrics_df_melted = pd.melt(metrics_df, id_vars =[&#39;K&#39;], value_vars =[&#39;accuracy&#39;, &#39;precision&#39;,&#39;recall&#39;, &#39;f1&#39;]) # Step 1: Set parameters for the visualization plt.rcParams.update({&#39;figure.figsize&#39;:(20,7),&#39;axes.titlesize&#39;: 20,&#39;axes.labelsize&#39;: 16,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) # Step 2: Generate visualization sns.lineplot(x=&quot;K&quot;, y=&quot;value&quot;, hue=&quot;variable&quot;, data=metrics_df_melted) plt.title(&quot;Performance Metrics for different K values&quot;) plt.ylabel(&#39;Cross-Validated Metric Values&#39;) plt.xlabel(&#39;Number of K-neighbors&#39;) plt.legend(bbox_to_anchor=(1, 0.5), loc=&quot;center left&quot;, fontsize=16) plt.show() . 4.3) Determine number of neighbors that optimizes precision . For the sake of this analysis, we will consider that the company at hand is a website that provides wine recommendations. Thus, the cost of recommending a bad wine is very high. This means that this firm will seek to maximize precision. . ideal_number_neighbours = metrics_df.sort_values(&#39;precision&#39;, ascending = False)[&#39;K&#39;].to_list()[0] . 5) Evaluation of optimal model metrics . 5.1) Classification Report, ROC Curve and Confusion Matrix . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = KNeighborsClassifier(n_neighbors=ideal_number_neighbours) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train_scaled, y_train) # Fit the training data to the visualizer visualizer.score(X_train_scaled, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train_scaled, y_train) # Fit the training data to the visualizer visualizer.score(X_test_scaled, y_test) # Evaluate the model on the test data visualizer.finalize() . We can see that the metrics for the training and test set are fairly similar, which indicates that there is no problem with overfitting or underfitting. Moreover, the ROC curve indicates that the classifier outperforms a random classifier (the baseline). .",
            "url": "https://leonardodecastro.github.io/data_science_blog/knn/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/05/20/Machine-Learning-KNN-Tuning.html",
            "relUrl": "/knn/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/05/20/Machine-Learning-KNN-Tuning.html",
            "date": " • May 20, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leonardodecastro.github.io/data_science_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leonardodecastro.github.io/data_science_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://leonardodecastro.github.io/data_science_blog/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Chanin is an Associate Professor of Bioinformatics and the founder of the Data Professor 1 YouTube channel. . An educational YouTube channel about data science and bioinformatics. &#8617; . |",
          "url": "https://leonardodecastro.github.io/data_science_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonardodecastro.github.io/data_science_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}