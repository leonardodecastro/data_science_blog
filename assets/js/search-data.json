{
  
    
        "post0": {
            "title": "SQL with Google Colab Tutorial 1",
            "content": "1) Aknowledge the sources used for this tutorial . This post was created using information from 2 sources. The first post explains how to use PostgreSQL with Google Colab. The second source is a tutorial by at Data.World. The links to these sources are found below: . https://thivyapriyaa.medium.com/setting-up-postgresql-on-google-colab-4d02166939fc | https://data.world/classrooms/guide-to-data-analysis-with-sql-and-datadotworld/workspace/file?filename=01_select_data.md | . 2) Import libraries . import psycopg2 import pandas as pd pd.options.mode.chained_assignment = None # default=&#39;warn&#39; . 3) Install PostgreSQL . Colab is a linux environment. Thus, we can use linux commands to install PostgreSQL on it . You might need to run the following cell twice if the database is not created when you run it just once. . !sudo apt-get -y -qq update # Update the PostgreSQL in case they are not !sudo apt-get -y -qq install postgresql # Install PostgreSQL !sudo service postgresql start # Start the PostgreSQL service # Setup a password `postgres` for username `postgres` !sudo -u postgres psql -U postgres -c &quot;ALTER USER postgres PASSWORD &#39;postgres&#39;;&quot; # Setup a database with name `tfio_demo` to be used !sudo -u postgres psql -U postgres -c &#39;DROP DATABASE IF EXISTS tfio_demo;&#39; # Drop databases if they exist !sudo -u postgres psql -U postgres -c &#39;CREATE DATABASE tfio_demo;&#39; # Drop databases if they exist . * Starting PostgreSQL 10 database server ...done. ALTER ROLE DROP DATABASE CREATE DATABASE . Setup necessary environmental variables . %env DB_NAME=tfio_demo %env DB_HOST=localhost %env DB_PORT=5432 %env DB_USER=postgres %env DB_PASS= postgres . env: DB_NAME=tfio_demo env: DB_HOST=localhost env: DB_PORT=5432 env: DB_USER=postgres env: DB_PASS=postgres . 4) Create tables within the database . 4.1) Drop tables if they already exist . !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS visitation;&quot; #### Table 2: Cats VS Dogs !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS animals;&quot; #### Table 3: Counties !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS counties;&quot; #### Table 4: Products !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS products;&quot; #### Table 5: Sales !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS sales;&quot; #### Table 6: Sales 2016 !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS sales2016;&quot; #### Table 7: Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS stores;&quot; #### Table 8: Convenience Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER-d $DB_NAME -c &quot;DROP TABLE IF EXISTS convenience;&quot; . 4.2) Create tables . !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE visitation(visitation_index SERIAL PRIMARY KEY,year INT,visitor_count INT,total_visitors INT);&quot; #### Table 2: Cats VS Dogs !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE animals(animal_index SERIAL PRIMARY KEY, location TEXT, region TEXT, number_of_households_in_1000 INT, percentage_of_households_with_pets DECIMAL(5,3), number_of_pet_households_in_1000 INT, percentage_of_dog_owners DECIMAL(5,3), dog_owning_households_1000s INT, mean_number_of_dogs_per_household DECIMAL(5,3), dog_population_in_1000 INT, percentage_of_cat_owners DECIMAL(5,3), cat_owning_households INT, mean_number_of_cats DECIMAL(5,3), cat_population INT);&quot; #### Table 3: Counties !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE counties(counties_index SERIAL PRIMARY KEY, county TEXT, county_number INT, population INT);&quot; #### Table 4: Products !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE products(products_index SERIAL PRIMARY KEY, item_no INT, category_name TEXT, item_description TEXT, vendor INT, vendor_name TEXT, bottle_size INT, pack INT, inner_pack INT, age INT, proof INT, list_date DATE, upc BIGINT, scc BIGINT, bottle_price MONEY, shelf_price DECIMAL, case_cost DECIMAL);&quot; #### Table 5: Sales !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE sales(sales_index SERIAL PRIMARY KEY, date DATE, convenience_store TEXT, store INT, county_number INT, county TEXT, category TEXT, category_name TEXT, vendor_no INT, vendor TEXT, item INT, description TEXT, pack INT, liter_size INT, state_btl_cost MONEY, btl_price MONEY, bottle_qty INT, total DECIMAL);&quot; #### Table 6: Sales 2016 !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE sales_2016(sales2016_index SERIAL PRIMARY KEY, invoice_item_number TEXT, date DATE, store_number INT, store_name TEXT, address TEXT, city TEXT, zip_Code TEXT, store_location TEXT, county_number TEXT, county TEXT, category TEXT, category_name TEXT, vendor_number TEXT, vendor_name TEXT, item_number INT, item_description TEXT, pack INT, bottle_volume_ml INT, state_bottle_cost DECIMAL, state_bottle_retail DECIMAL, bottles_sold INT, sale_dollars DECIMAL, volume_sold_liters DECIMAL, volume_sold_gallons DECIMAL);&quot; #### Table 7: Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE stores(stores_index SERIAL PRIMARY KEY, store INT, name TEXT, store_status TEXT, store_address TEXT, address_info TEXT);&quot; #### Table 8: Convenience Stores !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot;CREATE TABLE convenience(convenience_index SERIAL PRIMARY KEY, store INT,county TEXT);&quot; . 5) Populate the tables . 5.1) Import CSV files . #### 5.1) Import the csv for the &quot;visitation&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/visitation.csv -nv #### 5.2) Import the csv for the &quot;animals&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/animals.csv -nv #### 5.3) Import the csv for the &quot;counties&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/counties.csv -nv #### 5.4) Import the csv for the &quot;products&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/products.csv -nv #### 5.5) Import the csv for the &quot;sales&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/sales.zip -nv !unzip &#39;/content/sales.zip&#39; #### 5.6) Import the csv for the &quot;sales2016&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/sales_2016.zip -nv !unzip &#39;/content/sales_2016.zip&#39; #### 5.7) Import the csv for the &quot;stores&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/stores.csv -nv #### 5.8) Import the csv for the &quot;convenience&quot; table !wget https://raw.githubusercontent.com/leonardodecastro/data/main/convenience.csv -nv . 5.2) Populate the tables . #### 5.1) Populate the &quot;visitation&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY visitation(year, visitor_count, total_visitors) FROM &#39;visitation.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.2) Populate the &quot;animals&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY animals(location, region, number_of_households_in_1000, percentage_of_households_with_pets, number_of_pet_households_in_1000, percentage_of_dog_owners, dog_owning_households_1000s, mean_number_of_dogs_per_household , dog_population_in_1000, percentage_of_cat_owners, cat_owning_households, mean_number_of_cats , cat_population) FROM &#39;animals.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.3) Populate the &quot;counties&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY counties(county, county_number, population) FROM &#39;counties.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.4) Populate the &quot;products&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY products(item_no, category_name, item_description, vendor, vendor_name, bottle_size, pack, inner_pack, age, proof, list_date, upc, scc, bottle_price, shelf_price, case_cost) FROM &#39;products.csv&#39; ( format csv, header, delimiter &#39;;&#39;, encoding &#39;win1252&#39;, null &#39;&#39;);&quot; #### 5.5) Populate the &quot;sales&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY sales(date, convenience_store, store, county_number, county, category, category_name, vendor_no, vendor, item, description, pack, liter_size, state_btl_cost, btl_price, bottle_qty, total) FROM &#39;sales.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.6) Populate the &quot;sales2016&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY sales_2016(invoice_item_number, date, store_number, store_Name, address, city, zip_code, store_location, county_number, county, category, category_name, vendor_number, vendor_name, item_number, item_description, pack, bottle_volume_ml, state_bottle_cost, state_bottle_retail, bottles_sold, sale_dollars, volume_sold_liters, volume_sold_gallons) FROM &#39;sales_2016.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.7) Populate the &quot;stores&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY stores(store, name, store_status, store_address, address_info) FROM &#39;stores.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; #### 5.8) Populate the &quot;convenience&quot; table !PGPASSWORD=$DB_PASS psql -q -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c &quot; COPY convenience(store, county) FROM &#39;convenience.csv&#39; ( format csv, header, delimiter &#39;,&#39;, encoding &#39;win1252&#39;, null &#39; &#39; );&quot; . 6) Practice SQL . The introduction to the sub-sections of part 6 were extracted from the second source referenced in the first part of this script. . 6.1) SELECT, WHERE &amp; ORDER BY commands . When accessing data using SQL, Structured Query Language, the two foundational parts of the command sequence are SELECT and FROM. Using SELECT, you choose the information you want to include in your report. FROM identifies the source table or file name from which to retrieve or calculate that information. This structure will look like: . SELECT (desired data here) FROM (table name here) . 6.1.1) Select all columns using asterisk (*). . Here we select all columns from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT * FROM visitation&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head() . visitation_index year visitor_count total_visitors . 0 1 | 1944 | 1409 | 15431947 | . 1 2 | 1945 | 3205 | 15431947 | . 2 3 | 1946 | 10037 | 15431947 | . 3 4 | 1947 | 28652 | 15431947 | . 4 5 | 1948 | 45670 | 15431947 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.2) Select certain columns of a given table. . Here we select the columns year and vistor_count from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT visitation.year, visitation.visitor_count FROM visitation; &quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head() . year visitor_count . 0 1944 | 1409 | . 1 1945 | 3205 | . 2 1946 | 10037 | . 3 1947 | 28652 | . 4 1948 | 45670 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.3) Create aggregate measures (SUM). . Here we calculate the sum of all values for the column vistor_count from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT SUM(visitation.visitor_count) FROM visitation; &quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head(2) . sum . 0 15431947 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.4) Minimum, Maximum and Average Metrics. . Here we calculate the minimum, average and maximum values for the column vistor_count from the visitation table. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT MIN(visitation.visitor_count), AVG(visitation.visitor_count), MAX(visitation.visitor_count) FROM visitation;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head(2) . min avg max . 0 1409 | 214332.597222222222 | 398583 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.5) WHERE and ORDER BY command . Here we select the columns year and visitor_count from the visitation table. The selection is limited to visitor_count values equal or greater than 300000. The results are organized by year in a descending order. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT visitation.year, visitation.visitor_count FROM visitation WHERE visitation.visitor_count &gt;= 300000 ORDER BY visitation.year DESC;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]).head() . year visitor_count . 0 2015 | 381747 | . 1 2014 | 314102 | . 2 2013 | 316953 | . 3 2011 | 361862 | . 4 2010 | 372330 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.1.6) Summary . The following summary is provided in the second article that was referenced in part 1: . SELECT and FROM are the most essential parts of every query. | Selected data may request all (*), specific columns or calculated values. | Formal referencing of data includes the sourcing table (table.data). | WHERE is a valuable tool for filtering data for the desired output. | ORDER BY sorts the query results, ascending (ASC) is the default. | . 6.2) FILTER &amp; GROUP commands . Building on the basics of selecting desired data, add criteria to further refine the information retrieved for your report using conditional operators. These include command words such as AND, OR, NOT, IN and BETWEEN. They are added to the SQL query within the components of a WHERE clause, and are placed after the SELECT and FROM portions of the query. This structure will look like: . SELECT (desired data here) FROM (table name here) WHERE (filtering criteria) . 6.2.1) LIMIT command . Here we select the columns location, number_of_households_in_1000 and number_of_pet_households_in_1000 from the animals table. The selection is are organized by number_of_pet_households_in_1000 in a descending order. The display is limited to the 10 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT animals.location, animals.number_of_households_in_1000, animals.number_of_pet_households_in_1000 FROM animals ORDER BY animals.number_of_pet_households_in_1000 DESC LIMIT 10;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . location number_of_households_in_1000 number_of_pet_households_in_1000 . 0 California | 12974 | 6865 | . 1 Texas | 9002 | 5265 | . 2 Florida | 7609 | 4138 | . 3 New York | 7512 | 3802 | . 4 Pennsylvania | 5172 | 2942 | . 5 Ohio | 4661 | 2677 | . 6 Illinois | 5026 | 2602 | . 7 Michigan | 3804 | 2108 | . 8 Georgia | 3798 | 2093 | . 9 North Carolina | 3701 | 2089 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.2) Multiple WHERE commands . Here we select the columns location, mean_number_of_dogs_per_household and mean_number_of_cats from the animals table. The selection considers mean_number_of_dogs_per_household and mean_number_of_cats equal or greater than 2. The results are organized by location. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT animals.location, animals.mean_number_of_dogs_per_household, animals.mean_number_of_cats FROM animals WHERE animals.mean_number_of_dogs_per_household &gt;= 2 AND animals.mean_number_of_cats &gt;= 2 ORDER BY animals.location LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . location mean_number_of_dogs_per_household mean_number_of_cats . 0 Arkansas | 2.000 | 2.300 | . 1 New Mexico | 2.000 | 2.200 | . 2 Oklahoma | 2.100 | 2.200 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.3) BETWEEN command . Here we select the columns location, mean_number_of_cats and cat_population from the animals table. The selection considers mean_number_of_cats between 2.2 and 4. The results are organized by cat_population. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT animals.location, animals.mean_number_of_cats, animals.cat_population FROM animals WHERE animals.mean_number_of_cats BETWEEN 2.2 AND 4 ORDER BY animals.cat_population DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . location mean_number_of_cats cat_population . 0 Texas | 2.200 | 5565 | . 1 Ohio | 2.400 | 3786 | . 2 Indiana | 2.200 | 1912 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.4) AS command . Here we select the columns region together with the sums of number_of_pet_households_in_1000, dog_population_in_1000, cat_population and the sum of the last two sums from the animals table grouped by region. These sum variables were named total_pet_households, dog_total, cat_total and total_companion_pets. The results are organized by total_pet_households in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT animals.region, SUM(animals.number_of_pet_households_in_1000) AS total_pet_households, SUM(animals.dog_population_in_1000) AS dog_total, SUM(animals.cat_population) AS cat_total, (SUM(animals.dog_population_in_1000) + SUM(animals.cat_population)) AS total_companion_pets FROM animals GROUP BY animals.region ORDER BY total_pet_households DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . region total_pet_households dog_total cat_total total_companion_pets . 0 Central | 18438 | 20677 | 20332 | 41009 | . 1 South | 16886 | 20253 | 18356 | 38609 | . 2 East | 15991 | 13549 | 19256 | 32805 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.5) GROUP BY + HAVING command . Here we select the columns region and AVG(percentage_of_households_with_pets) from the animals table grouped by region. Notice that we keep the regions with an AVG(percentage_of_households_with_pets) greater than 55. Thus, HAVING is used with the GROUP BY command. The results are organized by region in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT animals.region, AVG(animals.percentage_of_households_with_pets) FROM animals GROUP BY animals.region HAVING AVG(animals.percentage_of_households_with_pets) &gt; 55 ORDER BY animals.region DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . region avg . 0 West | 59.9545454545454545 | . 1 South | 57.0909090909090909 | . 2 Central | 57.0615384615384615 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.2.6) Summary . The following summary is provided in the second article that was referenced in part 1: . WHERE provides an opportunity to narrow the criteria for queries. | Filters may be created with a variety of conditional commands. | Compound conditional filters may be used in queries. | GROUP BY aggregates information based on categorical dimensions. | HAVING criteria may be applied to the groups that are aggregated. | . 6.3) Aggregating and Grouping Data . Aggregation SQL functions bring clarity and depth to queries, which include DISTINCT, COUNT, GROUP BY and HAVING. These commands add to the filtering accomplished by the WHERE clause, and enable viewing data in groups, segments or other organized levels. DISTINCT and COUNT are often used in the SELECT statement to create and quantify aggregation. By contrast, GROUP BY and HAVING are placed after the WHERE clause. As you consider using these tools in your query, it is important to be consistent in the level of aggregation requested in one query. The following shows the appropriate order for the command tools in your new query: . SELECT DISTINCT (desired column list) FROM (table name here) WHERE (filtering criteria) GROUP BY (data_name) HAVING (additional filter) . 6.3.1) DISTINCT, ROUND, COUNT and Multiple GROUP BY commmands . Here we select the columns item, description, qty_sold, avg_transaction_price and total_sold from the products table. Notice that the last 3 variables mentioned above refer to COUNT(sales.item), ROUND(AVG(sales.total),2) and avg_transaction_price. The analysis is limited to unique combinations of items and descriptions. The selected variables were grouped by item and then description. The results are organized by qty_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT DISTINCT sales.item, sales.description, COUNT(sales.item) as qty_sold, ROUND(AVG(sales.total),2) as avg_transaction_price, SUM(sales.total) as total_sold FROM sales GROUP BY sales.item, sales.description ORDER BY qty_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . item description qty_sold avg_transaction_price total_sold . 0 11788 | Black Velvet | 31904 | 403.19 | 12863376.81 | . 1 36308 | Hawkeye Vodka | 31105 | 172.99 | 5380753.20 | . 2 43336 | Captain Morgan Original Spiced | 18129 | 192.94 | 3497803.08 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Here we select the columns county, qty_sold and total_sold from the sales table. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The analysis is limited to unique county names. Moreover, the description columns must be either &#39;Black Velvet&#39; or &#39;Hawkeye Vodka&#39;. The aggregate measure were created by groupbing the table by county if the item count per group exceeded 10000. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . 6.3.2) IN commmand . Here we select the columns county, qty_sold and total_sold from the products table. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The selected variables were grouped by county when the count of items was greater than 10000. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT DISTINCT sales.county, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales WHERE sales.description IN(&#39;Black Velvet&#39;, &#39;Hawkeye Vodka&#39;) GROUP BY sales.county HAVING (COUNT(sales.item)) &gt; 10000 ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county qty_sold total_sold . 0 Polk | 28058 | 4114463.32 | . 1 Linn | 12746 | 2366315.91 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Notice that you cannot replace (COUNT(sales.item)) by qty_sold after the HAVING command since it is considered part of the GROUP BY command. Since this command is not &quot;over&quot;, the variable qty_sold does not exist yet. However, once the GROUP BY + HAVING commands are used, the variable total_sold can be used in the ORDER BY command. . 6.3.3) COUNT(*) and CAST commmands . Here we select the columns vendor_name, products_offered and avg_price from the products table. Notice that the last 2 variables mentioned above refer to the count of all instances using COUNT(*) and the rounded average of the feature bottle_price. The selected variables were grouped by vendor_name. The results are organized by products_offered in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT products.vendor_name, COUNT(*) AS products_offered, ROUND(AVG(CAST(products.bottle_price AS DECIMAL)),2) AS avg_price FROM products GROUP BY products.vendor_name ORDER BY products_offered DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . vendor_name products_offered avg_price . 0 Jim Beam Brands | 925 | 11.54 | . 1 Diageo Americas | 906 | 18.16 | . 2 Pernod Ricard Usa/austin Nichols | 597 | 19.80 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; The CAST command is required so that the bottle price can be use without the monetary sign ($). . 6.3.4) LEFT JOIN + USING commands . Here we select the columns county, population, qty_sold and total_sold from the join of the sales and counties tables using the county column. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The analysis is limited to unique combinations of counties and population. The selected variables were grouped by county and then population, when the county population exceeded 150000. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT DISTINCT sales.county, counties.population, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales LEFT JOIN counties USING(county) WHERE description IN(&#39;Black Velvet&#39;, &#39;Hawkeye Vodka&#39;) GROUP BY sales.county, counties.population HAVING counties.population &gt; 150000 ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county population qty_sold total_sold . 0 Polk | 430640 | 28058 | 4114463.32 | . 1 Linn | 211226 | 12746 | 2366315.91 | . 2 Scott | 165224 | 5471 | 732618.98 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Notice that there will always be unique combinations of counties and populations since any given county only has one population value. In other types of examples, the constraint of finding unique combinations of variables might be an issue that requires more thought. . 6.3.5) LEFT JOIN + ON commands . Here we have the very same example as the previous query. However, we use ON instead of USING as a command. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT DISTINCT sales.county, counties.population, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales LEFT JOIN counties ON sales.county = counties.county WHERE description IN(&#39;Black Velvet&#39;, &#39;Hawkeye Vodka&#39;) GROUP BY sales.county, counties.population HAVING counties.population &gt; 150000 ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county population qty_sold total_sold . 0 Polk | 430640 | 28058 | 4114463.32 | . 1 Linn | 211226 | 12746 | 2366315.91 | . 2 Scott | 165224 | 5471 | 732618.98 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.3.6) NOT IN command . Here we select the columns county, qty_sold and total_sold from the sales table. Notice that the last 2 variables mentioned above refer to COUNT(sales.item) and SUM(sales.total). The analysis is limited to unique combinations of counties considering descriptions that include neither &#39;Black Velvet&#39; nor &#39;Hawkeye Vodka&#39; and considering the counties of &#39;Polk&#39;, &#39;Linn&#39;, &#39;Scott&#39; . The selected variables were grouped by county. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT DISTINCT sales.county, COUNT(sales.item) as qty_sold, SUM(sales.total) as total_sold FROM sales WHERE sales.description NOT IN(&#39;Black Velvet&#39;,&#39;Hawkeye Vodka&#39;) AND sales.county IN(&#39;Polk&#39;, &#39;Linn&#39;, &#39;Scott&#39;) GROUP BY sales.county ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county qty_sold total_sold . 0 Polk | 533688 | 82282998.47 | . 1 Linn | 238524 | 32093731.58 | . 2 Scott | 182849 | 27170229.69 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.3.7) Summary . The following summary is provided in the second article that was referenced in part 1: . DISTINCT and GROUP BY provide insights into aggregated slices of the data. | COUNTing the quantity of a group member can provide valuable insight. | Compound conditions can be joined by AND in queries. | HAVING further filters aggregated data, in addition to filtering applied to raw data by the WHERE clause. | . 6.4) JOIN command . Just as we organize belongings into separate storage areas, data needed for analysis is often stored in multiple locations. SQL enables you to easily combine data from multiple resources, if you have a unique identifier to bridge between the data tables. Connecting data sources is established with the FROM clause, identifying the source tables and the fields which are candidates for the unique connection. We’ll begin with the INNER JOIN, which returns only the records that match exactly from both tables. The basic command frame for the SELECT statement remains the same, with some new additions. When referencing columns within a JOIN query, use the formal labeling for column names, meaning table name together with column name separated by a period, for clear identification. The structure to JOIN two tables within the FROM clause is accomplished as follows: . FROM (primary table name here) INNER JOIN (secondary table here) ON (primary_table.field_from_primary = secondary_table.field_from_secondary) . 6.4.1) INNER JOIN command . Here we select the columns store_number, name, store_address and total_sold from the join of the sales2016 and stores tables. Notice that the last variable mentioned above refers to SUM(sales2016.sale_dollars). The INNER JOIN command used the columns store_number and store to merge the tables. The selected variables were grouped by store_number, name and store_address. The results are organized by total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT sales_2016.store_number, stores.name, stores.store_address, SUM(sales_2016.sale_dollars) AS total_sold FROM sales_2016 INNER JOIN stores ON sales_2016.store_number = stores.store GROUP BY sales_2016.store_number, stores.name, stores.store_address ORDER BY total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . store_number name store_address total_sold . 0 2633 | Hy-vee #3 / Bdi / Des Moines | 3221 Se 14th St nDes Moines, IA 503200000 n(41... | 7904425.39 | . 1 4829 | Central City 2 | 1501 Michigan Ave nDes Moines, IA 50314 n(41.6... | 7156755.00 | . 2 2512 | Hy-vee Wine and Spirits / Iowa City | 1720 Waterfront Dr nIowa City, IA 522400000 n(... | 3400203.01 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.2) Divide one column by another (feature creation) . Here we select the columns county, total_sold, population and per_capita_spend from the join of the sales2016 and counties tables. Notice that the the variables total_sold and per_capita_spend mentioned above refer to SUM(sales2016.sale_dollars) and ROUND((SUM(sales2016.sale_dollars)/(counties.population)),2). The INNER JOIN command used the column county to merge the tables. The selected variables were grouped by county and population. The results are organized by per_capita_spend in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT sales_2016.county, SUM(sales_2016.sale_dollars) AS total_sold, counties.population, ROUND((SUM(sales_2016.sale_dollars)/(counties.population)),2) AS per_capita_spend FROM sales_2016 INNER JOIN counties USING(county) GROUP BY sales_2016.county, counties.population ORDER BY per_capita_spend DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county total_sold population per_capita_spend . 0 Dickinson | 3112712.41 | 16667 | 186.76 | . 1 Polk | 42400328.31 | 430640 | 98.46 | . 2 Cerro Gordo | 3617023.05 | 44151 | 81.92 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.3) COUNT + DISTINCT commands . Here we select the columns county, qty_stores, total_sales, county_population and num_people_per_store from the join of the sales_2016 and counties tables. Notice that the the variables qty_stores, total_sales and num_people_per_store mentioned above refer to COUNT(DISTINCT sales_2016.store_number), SUM(sales_2016.sale_dollars) and (counties.population/(COUNT(DISTINCT sales_2016.store_number))). The INNER JOIN command used the column county to merge the tables. Notice that the selection is limited to the counties of &#39;Dickinson&#39;, &#39;Polk&#39;, &#39;Johnson&#39; and &#39;Cerro Gordo&#39;. The selected variables were grouped by county and then population. The results are organized by total_sales in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot;SELECT sales_2016.county, COUNT(DISTINCT sales_2016.store_number) AS qty_stores, SUM(sales_2016.sale_dollars) AS total_sales, counties.population AS county_population, (counties.population/(COUNT(DISTINCT sales_2016.store_number))) AS num_people_per_store FROM sales_2016 INNER JOIN counties USING(county) WHERE sales_2016.county IN(&#39;Dickinson&#39;, &#39;Polk&#39;, &#39;Johnson&#39;, &#39;Cerro Gordo&#39; ) GROUP BY sales_2016.county, counties.population ORDER BY total_sales DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county qty_stores total_sales county_population num_people_per_store . 0 Polk | 188 | 42400328.31 | 430640 | 2290 | . 1 Johnson | 50 | 10509392.26 | 130882 | 2617 | . 2 Cerro Gordo | 20 | 3617023.05 | 44151 | 2207 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.4) IS NOT NULL command . Here we select the columns county, store_number, store_name, qty_sold, avg_sale_price and total_sold from the join of the sales_2016 and convenience tables. Notice that the the 3 lasts variables mentioned above refer to COUNT(sales_2016.sale_dollars), ROUND(AVG(sales_2016.sale_dollars),2) and SUM(sales_2016.sale_dollars). The INNER JOIN command used the columns store_numbers and store to merge the tables. Notice that the selection is limited stores values that are not NULL and to the counties of &#39;Dickinson&#39;, &#39;Polk&#39; and &#39;Johnson&#39;. The selected variables were grouped by county, store_number and store_names. The results are organized by county and then total_sold in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT sales_2016.county, sales_2016.store_number, sales_2016.store_name, COUNT(sales_2016.sale_dollars) AS qty_sold, ROUND(AVG(sales_2016.sale_dollars),2) AS avg_sale_price, SUM(sales_2016.sale_dollars) AS total_sold FROM sales_2016 INNER JOIN convenience ON sales_2016.store_number = convenience.store WHERE convenience.store IS NOT NULL AND sales_2016.county IN(&#39;Johnson&#39;,&#39;Dickinson&#39;, &#39;Polk&#39;) GROUP BY sales_2016.county, sales_2016.store_number, sales_2016.store_name ORDER BY sales_2016.county, total_sold DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . county store_number store_name qty_sold avg_sale_price total_sold . 0 Dickinson | 4576 | THE BOONEDOCKS | 823 | 92.26 | 75929.34 | . 1 Dickinson | 4582 | Pronto / Spirit Lake | 634 | 89.43 | 56698.15 | . 2 Dickinson | 4387 | KUM &amp; GO #117 / SPIRIT LAKE | 293 | 99.13 | 29045.78 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 6.4.5) CASE + COALESCE commands . We begin the query by considering the column store_address. We get the position of the term &quot;IA&quot;. Then, we consider that if the position 3 string to the right of IA plus 1 position is smaller than &#39;1&#39;, then this value should be considered as &#39;no zip&#39;. Notice that this statement is useful in the case of &quot;Dehner Distillery&quot; where no zip code is available. Instead, in this case, we have &quot; n&quot; following the word IA. Since &quot; n&quot; is smaller than &quot;1&quot;, then we have &#39;no zip&#39; associated with this situation. In other cases, such as when the name is &#39;Louisiana Spirits LLC&#39;, then there is a zip number. This number goes from 3 positions to the right of &quot;IA&quot; up until (3 + 5) positions to the right of &quot;IA&quot;. In usch circumstances, the value extracted is the zip code number. These values are saved in column called zipcode. . Other columns are also selected. including name, store_id and store_status. Another piece of information is also extracted from the store_address column by considering the first string up until 1 position to the right of &quot;IA&quot;. This piece of information corresponds to the street address. COALESCE is used to get the first non-null argument. . Here we selection is made from the join of the stores and sales tables. The LEFT JOIN command used the column store. Notice that the selection is limited to instances with store_status equal to &quot;A&quot; and total sales equal to null. The results are organized by zipcode in a descending order. The display is limited to the 3 first rows. . connection = psycopg2.connect(user = &#39;postgres&#39;, password = &#39;postgres&#39;, host = &#39;localhost&#39;, database = &#39;tfio_demo&#39;) cursor = connection.cursor() # Create SQL query cursor.execute(&quot; SELECT CASE WHEN SUBSTRING(store_address,(POSITION(&#39;IA&#39; in stores.store_address)+3),1) &lt; &#39;1&#39; THEN &#39;no zip&#39; ELSE SUBSTRING(store_address,(POSITION(&#39;IA&#39; in stores.store_address)+3),5) END AS zipcode, stores.name, stores.store AS store_id, store_status, SUBSTRING(store_address,1,(POSITION(&#39;IA&#39; in stores.store_address)+1)) AS st_address, COALESCE(sales.total, 0) AS sales_totals FROM stores LEFT JOIN sales USING (store) WHERE store_status = &#39;A&#39; AND sales.total IS NULL ORDER BY zipcode DESC LIMIT 3;&quot;) table_contacts = cursor.fetchall() # Turn the results of the query into a dataframe for visualization of the results pd.DataFrame((table_contacts) , columns=[[desc[0] for desc in cursor.description]]) . zipcode name store_id store_status st_address sales_totals . 0 no zip | Dehner Distillery | 9919 | A | 7500, University Ave nClive, IA | 0 | . 1 70650 | Louisiana Spirits LLC | 9920 | A | 20909, South I-10 Frontage Rd nLacassine, IA | 0 | . 2 52804 | Sub Xpress &amp; Gas | 4526 | A | 4307 W Locust St nDavenport, IA | 0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; The following is the sytax for using CASE: . CASE &emsp; WHEN (condition_1) THEN (result_1) &emsp; WHEN (condition_2) THEN (result_2) &emsp; [WHEN ...] &emsp; [ELSE else_result] END . 6.4.6) Summary . The following summary is provided in the second article that was referenced in part 1: . INNER JOIN is the most common joining type, and is the default assumed, if you only include the command word JOIN in your query. | ON is the phrase to specify the matching unique identifier in both tables. | If the matching key columns in both tables have exactly matching names USING(column_name) may be used instead of the ON command structure. | When combining tables, the column or field names must include a way for SQL to correctly identify their source table. This is accomplished by providing the full table name or assigning an alias. | Appropriate use of WHERE clause filters can enable queries to narrow the focus of the inquiry and search rapidly through very large datasets quickly containing millions of records. | As shown in the final query, there are many tools for manipulating text fields and including specific parts in your reports as you answer stakeholder’s questions. Some of these essential tools are SUBSTRING, POSITION, COALESCE and CASE statements, which are all coming in the next sections. | .",
            "url": "https://leonardodecastro.github.io/data_science_blog/postgresql%20wit%20google%20colab/sql/2022/11/15/SQL-Tutorial-1.html",
            "relUrl": "/postgresql%20wit%20google%20colab/sql/2022/11/15/SQL-Tutorial-1.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Linear Models (Regularization)",
            "content": "1) Aknowledge the sources used for this tutorial . The dataset source for this tutorial: https://www.kaggle.com/code/deepakdodi/lasso-and-ridge-hypertuning-over-gapminder-dataset/data . This dataset considers different features (i.e population, fertility, HIV, CO2, child mortality &amp; Female/Male BMI ) to predict life expectancy. . 2) Import libraries . 2.1) Import libraries . import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from warnings import simplefilter from sklearn.preprocessing import StandardScaler from sklearn.exceptions import ConvergenceWarning from sklearn.preprocessing import PolynomialFeatures from sklearn.metrics import r2_score, mean_squared_error from sklearn.model_selection import RepeatedKFold, train_test_split, GridSearchCV from sklearn.linear_model import LinearRegression, LassoCV, RidgeCV, ElasticNetCV, SGDRegressor # Ignore the convergence warning when using the SGDRegressor (Internet research suggests ignoring this warning is not an issue for this algorithm) simplefilter(&quot;ignore&quot;, category=ConvergenceWarning) . 3) Create dataset for the analysis . We will create a dataset to exemplify the use of regularization. We will do so by using enriching a real dataset with polynomial features. | We seek to simulate real-life datasets that often contain correlated features, which might lead multiple regression models to overfit. | Regularization can help deal with the overfitting issue by performing feature selection which reduces variance but introduces bias. | . 3.1) Import dataset and incorporate polynomial features . # Step 1: Import dataset data = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/gapminder.csv&#39;).drop(&#39;Region&#39;, axis=1) # Step 2: Split into dependent and independent features X = data.drop([&#39;life&#39;], axis = 1) y = data[&#39;life&#39;].to_list() # Step 3: Get the names of the independent variables for later use column_names_list = X.columns.tolist() # Step 4: Add polynomial features poly = PolynomialFeatures(degree = 2, interaction_only=True) X = poly.fit_transform(X) # Step 5: Create a new dataframe with the polynomial features new_names_columns_list = column_names_list + [&#39;Poli.&#39; + str(i) for i in range(1, X.shape[1]- len(column_names_list) + 1)] data_2 = pd.DataFrame(X, columns= new_names_columns_list) # Step 6: Add dependent variables to the new dataframe data_2[&#39;life&#39;] = y . 3.2) Split the datasets . train, test = train_test_split(data_2, test_size=0.2, random_state = 8) . 3.3) Scale the datasets . # Step 1: Create a variable for the scaler scaler = StandardScaler() # Step 2: Apply fit_transform on the training set and apply the transformation to the test set train_scaled = scaler.fit_transform(train) test_scaled = scaler.transform(test) # Step 3: Split dependent and independent variables X_train = train_scaled[ : , : -1] y_train = train_scaled[ : , -1:] X_test = test_scaled[ : , : -1] y_test = test_scaled[ : , -1:] . 4) Run Different Linear Models . 4.1) Train the Linear Regression Model . model_1 = LinearRegression() model_1.fit(X_train, y_train) . LinearRegression() . 4.2) Tune the Lasso Regression Model . # Create a cross-validation object cv=RepeatedKFold(n_splits=7, n_repeats=3, random_state=1) # Run gridsearch with crossvalidation for lasso regression model_2 = LassoCV(alphas=np.logspace(-8, 8, 100), cv=cv, fit_intercept = False, tol=0.1) model_2.fit(X_train, y_train.ravel()) # Extract the optimal value of alpha optimal_alpha_lasso = model_2.alpha_ print(&#39;The optimal alpha value:&#39;,round(optimal_alpha_lasso,3)) . The optimal alpha value: 0.029 . 4.3) Tune the Ridge Regression Model . # Create a cross-validation object cv=RepeatedKFold(n_splits=7, n_repeats=3, random_state=1) # Run gridsearch with crossvalidation for lasso regression model_3 = RidgeCV(alphas=np.logspace(-8, 8, 100), cv=cv, fit_intercept = False) model_3.fit(X_train, y_train.ravel()) # Extract the optimal value of alpha optimal_alpha_ridge = model_3.alpha_ print(&#39;The optimal alpha value:&#39;, round(optimal_alpha_ridge,3)) . The optimal alpha value: 72.208 . 4.4) Tune the Elastic Net Model . # Create a cross-validation object cv=RepeatedKFold(n_splits=7, n_repeats=3, random_state=1) # Run gridsearch with crossvalidation for lasso regression model_4 = ElasticNetCV(max_iter=100000, l1_ratio=np.logspace(-8, 8, 100),alphas=np.logspace(-8, 8, 100), cv=cv, fit_intercept = False, tol=0.1) model_4.fit(X_train, y_train.ravel()) # Extract the optimal value of alpha and l1 ratio l1_ratio = model_4.l1_ratio_ alpha = model_4.alpha_ print(&#39;The optimal l1_ratio value:&#39;, round(l1_ratio,3), &#39; n&#39;) print(&#39;The optimal alpha value:&#39;, round(alpha,3)) . The optimal l1_ratio value: 0.129 The optimal alpha value: 0.187 . 4.5) Tune the SGD Regressor . Let&#39;s tune the Stochastic Gradient Descent Regressor. This model is often useful for very large datasets. . # Create a cross-validation object cv=RepeatedKFold(n_splits=7, n_repeats=3, random_state=1) # Grid search - this will take about 1 minute. param_grid = { &#39;alpha&#39;: np.logspace(-8, 8, 100), &#39;loss&#39;: [&#39;squared_error&#39;, &#39;huber&#39;, &#39;epsilon_insensitive&#39;], &#39;tol&#39;: [0.1], &#39;penalty&#39;: [&#39;l2&#39;, &#39;l1&#39;, &#39;elasticnet&#39;], &#39;learning_rate&#39;: [&#39;constant&#39;, &#39;optimal&#39;, &#39;invscaling&#39;], &#39;random_state&#39;: [42]} # Run gridsearch with crossvalidation for lasso regression model_5 = GridSearchCV(SGDRegressor(), param_grid, cv = cv, verbose = 0) model_5.fit(X_train, y_train.ravel()) print(&#39;Optimal Hyperparameters: &#39;,model_5.best_params_) . Optimal Hyperparameters: {&#39;alpha&#39;: 0.004534878508128591, &#39;learning_rate&#39;: &#39;constant&#39;, &#39;loss&#39;: &#39;huber&#39;, &#39;penalty&#39;: &#39;l1&#39;, &#39;random_state&#39;: 42, &#39;tol&#39;: 0.1} . 5) Compare model metrics . 5.1) Create a dataframe with model metrics . # Step 1: Create lists and dictionaries for later use metrics_dict = {} model_names_list = [&#39;OLS&#39;,&#39;LASSO&#39;,&#39;RIDGE&#39;,&#39;ElasticNet&#39;,&#39;SGD&#39;] model_list = [model_1, model_2, model_3, model_4, model_5] # Step 2: Extract model metrics for each model for i in range(0,len(model_list)): # Select the trained model model = model_list[i] # Determine the number of coefficients that were not zero if model != model_5: number_of_non_zero_coef = len( abs(model.coef_) [ abs(model.coef_) &gt; 0 ]) else: number_of_non_zero_coef = len( abs(model.best_estimator_.coef_) [ abs(model.best_estimator_.coef_) &gt; 0 ]) # Store metrics and the number of coefficients that were not zero in a dictionary metrics_dict[model_names_list[i]] = {&#39;train_r_squared&#39;: r2_score(y_train, model.predict(X_train)), &#39;test_r_squared&#39;: r2_score(y_test, model.predict(X_test)), &#39;train_mse&#39;: mean_squared_error(y_train, model.predict(X_train)), &#39;test_mse&#39;: mean_squared_error(y_test, model.predict(X_test)), &#39;number_of_non_zero_coef&#39;: number_of_non_zero_coef} # Step 3: Create a dataframe with model metrics metrics_df = pd.DataFrame.from_dict(metrics_dict, orient=&#39;index&#39;).rename_axis(&#39;Model&#39;).reset_index() metrics_df.round(3) . Model train_r_squared test_r_squared train_mse test_mse number_of_non_zero_coef . 0 OLS | 0.937 | 0.711 | 0.063 | 0.411 | 37 | . 1 LASSO | 0.880 | 0.848 | 0.120 | 0.216 | 15 | . 2 RIDGE | 0.888 | 0.889 | 0.112 | 0.159 | 36 | . 3 ElasticNet | 0.892 | 0.887 | 0.108 | 0.162 | 18 | . 4 SGD | 0.880 | 0.894 | 0.120 | 0.150 | 27 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 5.2) Visualize model metrics results . # Step 1: Create a smaller dataframe with model metrics r_squared_df = pd.melt(metrics_df[[&#39;Model&#39;,&#39;train_r_squared&#39;, &#39;test_r_squared&#39;]], id_vars=[&#39;Model&#39;], var_name=&#39;Dataset&#39;, value_name=&#39;R-Squared&#39;) r_squared_df[&#39;Dataset&#39;] = r_squared_df[&#39;Dataset&#39;].map({&#39;train_r_squared&#39;: &#39;Train&#39;, &#39;test_r_squared&#39;: &#39;Test&#39;}) # Step 2: Create a dataframe with nonzero coefficients mse_df = pd.melt(metrics_df[[&#39;Model&#39;,&#39;train_mse&#39;, &#39;test_mse&#39;]], id_vars=[&#39;Model&#39;], var_name=&#39;Dataset&#39;, value_name=&#39;MSE&#39;) mse_df[&#39;Dataset&#39;] = mse_df[&#39;Dataset&#39;].map({&#39;train_mse&#39;: &#39;Train&#39;, &#39;test_mse&#39;: &#39;Test&#39;}) # Step 3: Create a dataframe with nonzero coefficients coef_df = metrics_df[[&#39;Model&#39;,&#39;number_of_non_zero_coef&#39;]] # Step 4: Set seaborn plotting aesthetics sns.set(style=&#39;white&#39;) fig, axes = plt.subplots(1, 3, sharex=True, figsize=(20,5)) # Step 5: Create visualization 1 sns.barplot(x=&#39;Model&#39;, y=&#39;R-Squared&#39;, hue=&#39;Dataset&#39;, data = r_squared_df, ax= axes[0]).set_title(&#39;Overfitting Inspection&#39;, size = 14, weight=&#39;bold&#39;) axes[0].legend(loc=&#39;upper center&#39;, bbox_to_anchor=(1.1, -0.1),fancybox=True, shadow=True, ncol=5) axes[0].set_xlabel(&#39;Model&#39;, weight=&#39;bold&#39;, fontsize = 13) axes[0].set_ylabel(&#39;R-Squared&#39;, weight=&#39;bold&#39;, fontsize = 13) axes[0].tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=12) # Step 6: Create visualization 2 sns.barplot(x=&#39;Model&#39;, y=&#39;MSE&#39;, hue=&#39;Dataset&#39;, data = mse_df, ax= axes[1]).set_title(&#39;Mean Squared Error&#39;, size = 14, weight=&#39;bold&#39;) axes[1].legend(&#39;&#39;) axes[1].set_xlabel(&#39;Model&#39;, weight=&#39;bold&#39;, fontsize = 13) axes[1].set_ylabel(&#39;MSE&#39;, weight=&#39;bold&#39;, fontsize = 13) axes[1].tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=12) # Step 7: Create visualization 3 norm = plt.Normalize(coef_df[&#39;number_of_non_zero_coef&#39;].min(), coef_df[&#39;number_of_non_zero_coef&#39;].max()) cmap = plt.get_cmap(&quot;autumn_r&quot;) axes[2].bar(x=&quot;Model&quot;, height=&quot;number_of_non_zero_coef&quot;, data=coef_df, color=cmap(norm(coef_df[&#39;number_of_non_zero_coef&#39;].values))) axes[2].tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=12) axes[2].set_title(&#39;Number of Nonzero Coefficients&#39;, fontweight = &#39;bold&#39;,fontsize = 14) axes[2].set_xlabel(&#39;Model&#39;, weight=&#39;bold&#39;, fontsize = 13) axes[2].set_ylabel(&#39;Number of Coefficients&#39;, weight=&#39;bold&#39;, fontsize = 13) plt.show() . Comparison of the algorithms (overview): . The first chart shows that the OLS model overfits while all regularized model present very little overfitting. | The second chart shoes that regularized models present lower mean squared error values than the OLS regression. | The third chart shows that the Lasso Regression is the choice that uses fewer variables for prediction (15 out of 37). | . The best model considering this tutorial would be the Elastic Net Model since if provides high performance and also leads to a stark reduction in the number of variables, which helps improve model explainability. . The results in of the OLS model could improve for different random_state values used for splitting the data. Sometimes, other split values lead to very high performances by the OLS model. This fact does not disprove the main point of this tutorial regarding regularization. After all, regardless of the random_state, regularized models tend to present robust perfomance metrics. . 6) Read more about regularization techniques . The following sources provide a great overview of the algorithms discussed in this tutorial: . https://www.kaggle.com/code/maxitype/2-linear-lasso-ridge-sgd-poly-beginner | https://towardsdatascience.com/hyperparameter-tuning-in-lasso-and-ridge-regressions-70a4b158ae6d | https://medium.com/analytics-vidhya/lasso-regression-fundamentals-and-modeling-in-python-ad8251a636cd | https://towardsdatascience.com/from-linear-regression-to-ridge-regression-the-lasso-and-the-elastic-net-4eaecaf5f7e6 | https://towardsdatascience.com/whats-the-difference-between-linear-regression-lasso-ridge-and-elasticnet-8f997c60cf29 | .",
            "url": "https://leonardodecastro.github.io/data_science_blog/ols/multiple%20linear%20regression/lasso%20regression/ridge%20regression/elastic%20net%20model/sgd%20regressor/regularization/2022/05/22/Machine-Learning-Regularized-Linear-Models.html",
            "relUrl": "/ols/multiple%20linear%20regression/lasso%20regression/ridge%20regression/elastic%20net%20model/sgd%20regressor/regularization/2022/05/22/Machine-Learning-Regularized-Linear-Models.html",
            "date": " • May 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unsupervised Learning 1 (Hyperparameter Tuning)",
            "content": "1) Import libraries and define functions . 1.1) Import libraries . import re import bs4 import ast import requests import numpy as np import pandas as pd import seaborn as sns from IPython import display from bs4 import BeautifulSoup from matplotlib import pyplot from collections import Counter import matplotlib.pyplot as plt from sklearn.cluster import KMeans import matplotlib.patches as mpatches from sklearn.decomposition import PCA import scipy.cluster.hierarchy as shc from mpl_toolkits.mplot3d import Axes3D from sklearn.metrics import accuracy_score from yellowbrick.cluster import KElbowVisualizer from sklearn.cluster import AgglomerativeClustering pd.options.mode.chained_assignment = None # default=&#39;warn&#39; sns.set_theme() . 2) Exploratory Data Analysis (EDA) . The data used in this analysis is obtained using web scraping, which was used to extract data regarding soccer players from the FIFA website https://sofifa.com/. Since the main purpose of the script is not to show how data scraping works, the explanation for this part will be concise. . 2.1) Identify the URL of the pages that display the top players . We will consider solely players with an overall rating of 75 or greater. . offset_list = [&#39;&#39;] + [str(i) for i in list(range(60,1861,60))] url_top_players_list = [&#39;https://sofifa.com/players?type=all&amp;oal=75&amp;offset=&#39; + i for i in offset_list] # Display some examples of URL pages where you can find top players url_top_players_list[:2] . [&#39;https://sofifa.com/players?type=all&amp;oal=75&amp;offset=&#39;, &#39;https://sofifa.com/players?type=all&amp;oal=75&amp;offset=60&#39;] . 2.2) Identify the URL tof the pages with information for each player . url_each_player_list =[] for url in url_top_players_list: page=requests.get(url) soup=BeautifulSoup(page.content,&#39;html.parser&#39;) for link in soup.find_all(&#39;a&#39;): if link.get(&#39;href&#39;) is not None: url_each_player_list.append(link.get(&#39;href&#39;)) url_each_player_list = [&#39;http://sofifa.com&#39;+l for l in url_each_player_list if &#39;player/&#39;in l] . 2.3) Determine which attributes we seek to analyze . attributes=[&#39;Crossing&#39;,&#39;Finishing&#39;,&#39;Heading Accuracy&#39;, &#39;Short Passing&#39;,&#39;Volleys&#39;,&#39;Dribbling&#39;,&#39;Curve&#39;,&#39;FK Accuracy&#39;,&#39;Long Passing&#39;,&#39;Ball Control&#39;,&#39;Acceleration&#39;, &#39;Sprint Speed&#39;,&#39;Agility&#39;,&#39;Reactions&#39;,&#39;Balance&#39;,&#39;Shot Power&#39;,&#39;Jumping&#39;,&#39;Stamina&#39;,&#39;Strength&#39;,&#39;Long Shots&#39;,&#39;Aggression&#39;,&#39;Interceptions&#39;,&#39;Positioning&#39;,&#39;Vision&#39;,&#39;Penalties&#39;, &#39;Composure&#39;,&#39;Defensive Awareness&#39;,&#39;Standing Tackle&#39;,&#39;Sliding Tackle&#39;,&#39;GK Diving&#39;,&#39;GK Handling&#39;,&#39;GK Kicking&#39;,&#39;GK Positioning&#39;,&#39;GK Reflexes&#39;] . 2.4) Extract the information for each one of the players . dictionary_of_dictionaries = {} for link in url_each_player_list: response = requests.get(link) soup = bs4.BeautifulSoup(response.text, &#39;html.parser&#39;) processing_items_1 = soup.find_all(&#39;div&#39;, {&#39;class&#39;: &quot;card&quot;}) processing_items_2 = [] for i in processing_items_1: processing_items_2.append(i.find_all(&#39;li&#39;)) list_strings = [] for j in processing_items_2: for k in range(0,len(processing_items_2)): try: list_strings.append(j[k].text) except: continue dictionary_values = {} for item in attributes: try: matching = [s for s in list_strings if item in s] dictionary_values[item] = [int(s) for s in matching[0].split() if s.isdigit()][0] except: continue dictionary_of_dictionaries[link.split(&#39;/&#39;)[5]] = dictionary_values . 2.5) Turn extracted features into data frames . list_dfs = [] for player in dictionary_of_dictionaries: df = pd.DataFrame(dictionary_of_dictionaries[player], index=[player,]) list_dfs.append(df) player_data_df = pd.concat(list_dfs) player_data_df.index.rename(&#39;Player&#39;, inplace=True) . 2.6) Extract information regarding player position . player_positions_dict = {} for link in url_each_player_list: response = requests.get(link) soup = bs4.BeautifulSoup(response.text, &#39;html.parser&#39;) processing_items_1 = soup.find_all(&#39;div&#39;, {&#39;class&#39;: &quot;meta ellipsis&quot;}) processing_items_2 = [] for i in processing_items_1: processing_items_2.append(i.find_all(&#39;span&#39;)) list_strings = [] for j in processing_items_2: for k in range(0,len(str(processing_items_2[0]).split(&#39;,&#39;))): try: position_raw = j[k].text if position_raw in [&#39;LS&#39;,&#39;ST&#39;,&#39;RS&#39;,&#39;LW&#39;,&#39;LF&#39;,&#39;CF&#39;,&#39;RF&#39;,&#39;RW&#39;,&#39;LAM&#39;,&#39;CAM&#39;,&#39;RAM&#39;]: position = &#39;Forward&#39; elif position_raw in [&#39;LM&#39;,&#39;LCM&#39;,&#39;CM&#39;,&#39;RCM&#39;,&#39;RM&#39;,&#39;LWB&#39;,&#39;LDM&#39;,&#39;CDM&#39;,&#39;RDM&#39;,&#39;RWB&#39;]: position = &#39;Midfielder/Defender&#39; elif position_raw in [&#39;LB&#39;,&#39;LCB&#39;,&#39;CB&#39;,&#39;RCB&#39;,&#39;RB&#39;]: position = &#39;Midfielder/Defender&#39; elif position_raw in [&#39;GK&#39;]: position = &#39;Goal Keeper&#39; list_strings.append(position) except: continue player_positions_dict[link.split(&#39;/&#39;)[5]] = list_strings . 2.7) Map the player position information to the data frame . player_data_df[&#39;Position&#39;] = player_data_df.index.map(player_positions_dict) player_data_df.dropna(inplace=True) player_data_df[[&#39;Position&#39;]].head(2) . Position . Player . kylian-mbappe [Forward, Forward] | . kevin-de-bruyne [Midfielder/Defender, Forward] | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Notice that a player can receive multiple labels for his position. A player can be classified as a &quot;striker&quot; for one team and as a &quot;left wing&quot; for the national team. These 2 positions were encoded as &quot;Forward&quot; in part 2.6. This explains why the table above contains repetitions of labels such as [&quot;Midfielder&quot;, &quot;Midfielder&quot;]. The following pirce of code extracts the most common position for the player. . player_data_df[&#39;Position&#39;] = player_data_df[&#39;Position&#39;].apply(lambda list_words: Counter(list_words).most_common(1)[0][0]) . 2.8) Export the data frame to avoid web scraping at every run . player_data_df.to_csv(&#39;data_players.csv&#39;, encoding=&#39;utf-8&#39;) . 2.9) Import the dataframe from the Github repository . player_data_df = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/data_players.csv&#39;, sep =&#39;,&#39;,encoding=&#39;utf-8&#39;).set_index(&#39;Position&#39;) player_data_df[[&#39;Player&#39;,&#39;Crossing&#39;,&#39;Finishing&#39;,&#39;Heading Accuracy&#39;,&#39;Short Passing&#39;,&#39;Volleys&#39;]].head(2) . Player Crossing Finishing Heading Accuracy Short Passing Volleys . Position . Forward kylian-mbappe | 78 | 93 | 72 | 85 | 83 | . Midfielder/Defender kevin-de-bruyne | 94 | 85 | 55 | 93 | 83 | . 3) Split and scale data . We do not have to split the dataset since this script regards unsupervised learning. Therefore, there is no target variable. Moreover, scaling is not required since the features are all in the same scale (between 0 and 100) . 4) Determine the ideal number of clusters (K-means) . There are 2 common methods to determine the ideal number of clusters: . The &quot;Elbow Method&quot; | The &quot;Silhouette Method&quot; | . 4.1) Determine the number of clusters with the Elbow Method . We used &#39;calinski_harabasz&#39; as the metric. Other metrics include &#39;distortion&#39;, &#39;silhouette&#39; and &#39;calinski_harabasz&#39;. . # Get rid of the names of the players since this information is not relevant for the cluster analysis df_just_attributes = player_data_df.drop(&#39;Player&#39;, axis = 1) # Use the visualizer to run the Elbow method model = KMeans(random_state=42) visualizer = KElbowVisualizer(model, metric=&#39;calinski_harabasz&#39;, k=(2,20), timings=False) visualizer.fit(df_just_attributes) # Fit the data to the visualizer visualizer.show() plt.show() . 4.2) Determine the number of clusters with the Silhouette Method . We do not want the &quot;Elbow value&quot; for the silhouette plot. Instead, we want to extract the number of clusters for which we have the maximum silhouette value. Thus, we extract this information and print it over the plot. . # Create subplots (this allows later changes in the plot image) fig, ax = plt.subplots() # Use the visualizer to run the Silhouette Method model = KMeans(random_state=42) visualizer = KElbowVisualizer(model, metric=&#39;silhouette&#39;, k=(2,20), timings=False, locate_elbow=False, title=&quot;Silhouette Score for Means Clustering&quot;) visualizer.fit(df_just_attributes) # Fit the data to the visualizer # Determine the maximum silhouette score and the number of clusters that leads to such a score silhouette_score_dict = dict(zip(list(range(2,20)), list(visualizer.k_scores_))) num_cluster_max_sil = max(silhouette_score_dict, key=silhouette_score_dict.get) max_score = round((silhouette_score_dict[num_cluster_max_sil]),4) # Create a vertical line to show the precise number of clusters that leads to the maximum silhouette value ax.axvline(x= num_cluster_max_sil, linestyle=&#39;--&#39;, color=&#39;black&#39;, label=&#39;Max at k = &#39; + str(num_cluster_max_sil) + &#39;, score = &#39; + str(max_score)) ax.legend(loc=&#39;center left&#39;, bbox_to_anchor=(1, 0.5)) # Display visualization visualizer.show() plt.show() . 4.3) Interpret the results of the optimal number of clusters . The result is that the optimal number of clusters would be two. This might make intuitive sense. After all, goal keepers have a very different profile from other players. Let&#39;s see if this theory is true. . # Run K-means with 2 clusters kmeans = KMeans(n_clusters=2,random_state=42).fit(df_just_attributes) df_just_attributes[&#39;cluster_label&#39;] = kmeans.fit_predict(df_just_attributes) # Check which cluster labels were assigned for goal keepers df_just_attributes[df_just_attributes.index == &#39;Goal Keeper&#39;][[&#39;cluster_label&#39;]].head(2) . cluster_label . Position . Goal Keeper 1 | . Goal Keeper 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df_just_attributes[&#39;Goal Keeper?&#39;] = np.where(df_just_attributes.index == &#39;Goal Keeper&#39;,1,0) # Determine the accuracy of the clustering method accuracy_results = 100*accuracy_score(df_just_attributes[&#39;Goal Keeper?&#39;], df_just_attributes[&#39;cluster_label&#39;]) print(&#39;Accuracy of the prediction using clusters: &#39;, accuracy_results, &#39;%&#39;) . Accuracy of the prediction using clusters: 100.0 % . 5) Determine the ideal number of clusters (Hierarchical Clustering) . 5.1) Determine the number of clusters using a dendogram . Dendograms should not be used as a definite method for determining the number of clusters. However, this visualization provides some insights into the possible clusters. We use the method &quot;Ward&quot; and the metric &quot;Euclidian&quot;. However, there are different metrics and methods that can be used, as detailed below: . Method: single, complete, average, weighted, centroid, median, ward | Metric: euclidean, minkowski, cityblock, seuclidean, sqeuclidean, cosine, correlation, hamming, jaccard, jensenshannon, chebyshev, canberra, braycurtis, mahalanobis, yule, matching, dice, kulczynski1, rogerstanimoto,russellrao, sokalmichener, sokalsneath, kulczynski1 | . # Get rid of the names of the players since this information is not relevant for the cluster analysis df_just_attributes = player_data_df.drop(&#39;Player&#39;, axis = 1) # Dendogram for Heirarchical Clustering pyplot.figure(figsize=(10, 7)) pyplot.title(&quot;Dendrograms&quot;) dend = shc.dendrogram(shc.linkage(df_just_attributes, method=&#39;ward&#39;, metric=&#39;euclidean&#39;)) # Add horizontal line. plt.axhline(y=1200, c=&#39;red&#39;, lw=2, linestyle=&#39;dashed&#39;) plt.text(4500,1300,&#39;Cut (4 positions)&#39;, c=&#39;red&#39;) plt.show() . Once again the distiction between 2 groups is very stark (Goal Keepers in Orange VS Other players in Green). | This dendrogram suggests that a &quot;small&quot; number of clusters between 2 and 6 would be ideal to deal with this dataset. | . 5.2) Interpret the results of the optimal number of clusters . We can apply 2 hierarchical clustering technique to see if our intepretation of the dendogram is correct. . 5.2.1) Run the first hierarchical clustering algorithm (maximum distances) . df_just_attributes[&#39;cluster_label&#39;] = AgglomerativeClustering(n_clusters=2, affinity=&#39;euclidean&#39;, linkage=&#39;complete&#39;).fit_predict(df_just_attributes) # Check which cluster labels were assigned for goal keepers df_just_attributes[df_just_attributes.index == &#39;Goal Keeper&#39;][[&#39;cluster_label&#39;]].head(2) . cluster_label . Position . Goal Keeper 1 | . Goal Keeper 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df_just_attributes[&#39;Goal Keeper?&#39;] = np.where(df_just_attributes.index == &#39;Goal Keeper&#39;,1,0) # Determine the accuracy of the clustering method accuracy_results = 100*accuracy_score(df_just_attributes[&#39;Goal Keeper?&#39;], df_just_attributes[&#39;cluster_label&#39;]) print(&#39;Accuracy of the prediction using clusters: &#39;, accuracy_results, &#39;%&#39;) . Accuracy of the prediction using clusters: 100.0 % . 5.2.2) Run the second hierarchical clustering algorithm (variance minimization) . # Get rid of the names of the players since this information is not relevant for the cluster analysis df_just_attributes = player_data_df.drop(&#39;Player&#39;, axis = 1) # The argument linkage = &#39;complete&#39; uses the maximum distances between all observations of the two sets. df_just_attributes[&#39;cluster_label&#39;] = AgglomerativeClustering(n_clusters=2, affinity=&#39;euclidean&#39;, linkage=&#39;ward&#39;).fit_predict(df_just_attributes) # Check which cluster labels were assigned for goal keepers df_just_attributes[df_just_attributes.index == &#39;Goal Keeper&#39;][[&#39;cluster_label&#39;]].head(2) . cluster_label . Position . Goal Keeper 1 | . Goal Keeper 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df_just_attributes[&#39;Goal Keeper?&#39;] = np.where(df_just_attributes.index == &#39;Goal Keeper&#39;,1,0) # Determine the accuracy of the clustering method accuracy_results = 100*accuracy_score(df_just_attributes[&#39;Goal Keeper?&#39;], df_just_attributes[&#39;cluster_label&#39;]) print(&#39;Accuracy of the prediction using clusters: &#39;, accuracy_results, &#39;%&#39;) . Accuracy of the prediction using clusters: 100.0 % . 6) Consider PCA for dimensionality reduction . 6.1 ) Why PCA is appropriate in this analysis. . This technique is appropriate in this case since many of the features are highly correlated. In fact, FIFA&#39;s website automatically classifies many similar features into categories. For instance, it would be logical to use this technique to reduce the number of features in the category &quot;Attacking&quot;. The same goes for each one of the 7 categories that are used to classify the 34 features. . 6.2) Why we did not display the PCA analysis here . Our experiments using PCA led to results that were very similar to using domain knowledge to reduce the number of features. Since this second approach leads to an analysis that is easier to interpret, we will only show this simpler option. Other posts will cover PCA in contexts in which it actually leads to increases in performance. . 7) Use domain knowledge for dimensionality reduction . 7.1) Create new features as means of the variables of each type . player_data_df[&#39;Attacking Feature&#39;] = player_data_df[[&#39;Crossing&#39;, &#39;Finishing&#39;, &#39;Heading Accuracy&#39;, &#39;Short Passing&#39;,&#39;Volleys&#39;]].mean(axis=1) player_data_df[&#39;Skill Feature&#39;] = player_data_df[[&#39;Dribbling&#39;, &#39;Curve&#39;, &#39;FK Accuracy&#39;, &#39;Long Passing&#39;,&#39;Ball Control&#39;]].mean(axis=1) player_data_df[&#39;Movement Feature&#39;] = player_data_df[[&#39;Acceleration&#39;, &#39;Sprint Speed&#39;, &#39;Agility&#39;, &#39;Reactions&#39;,&#39;Balance&#39;]].mean(axis=1) player_data_df[&#39;Power Feature&#39;] = player_data_df[[&#39;Shot Power&#39;, &#39;Jumping&#39;, &#39;Stamina&#39;, &#39;Strength&#39;, &#39;Long Shots&#39;]].mean(axis=1) player_data_df[&#39;Mentality Feature&#39;] = player_data_df[[&#39;Aggression&#39;, &#39;Interceptions&#39;, &#39;Positioning&#39;, &#39;Vision&#39;, &#39;Penalties&#39;, &#39;Composure&#39;]].mean(axis=1) player_data_df[&#39;Defending Feature&#39;] = player_data_df[[&#39;Defensive Awareness&#39;, &#39;Standing Tackle&#39;, &#39;Sliding Tackle&#39;]].mean(axis=1) player_data_df[&#39;Goalkeeping Feature&#39;] = player_data_df[[&#39;GK Diving&#39;, &#39;GK Handling&#39;, &#39;GK Kicking&#39;, &#39;GK Positioning&#39;,&#39;GK Reflexes&#39;]].mean(axis=1) . 7.2) Delete the original features . player_data_df.drop(attributes,axis=1, inplace = True) player_data_df.drop(&#39;Player&#39;,axis=1, inplace = True) . 8) Apply clustering techniques with 3 clusters . We will consider 3 clusters to make it easier to compare with the 3 selected categories (goalkeepers, midfielders/defenders &amp; forwards). . 8.1) Apply k-means . # Get rid of the names of the players since this information is not relevant for the cluster analysis k_means_df = player_data_df.copy() # Run K-means with 2 clusters kmeans = KMeans(n_clusters=3,random_state=42).fit(k_means_df) k_means_df[&#39;Cluster Label&#39;] = kmeans.fit_predict(k_means_df) # Check which cluster labels were assigned for each position df1 = k_means_df[k_means_df.index==&#39;Forward&#39;][[&#39;Cluster Label&#39;]].head(5) df2 = k_means_df[k_means_df.index==&#39;Midfielder/Defender&#39;][[&#39;Cluster Label&#39;]].head(5) df3 = k_means_df[k_means_df.index==&#39;Goal Keeper&#39;][[&#39;Cluster Label&#39;]].head(5) pd.concat([df1.reset_index(),df2.reset_index(),df3.reset_index()], axis=1) . Position Cluster Label Position Cluster Label Position Cluster Label . 0 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 1 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 2 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 3 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 4 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Determine the accuracy of the clustering technique . k_means_df[&#39;Cluster Label&#39;] = k_means_df[&#39;Cluster Label&#39;].map({2:&#39;Forward&#39;,0:&#39;Midfielder/Defender&#39;,1:&#39;Goal Keeper&#39;}) # Determine the accuracy of the clustering method accuracy_results = round((100*accuracy_score(k_means_df.index, k_means_df[&#39;Cluster Label&#39;])),1) print(&#39;Accuracy of the prediction using clusters: &#39;, accuracy_results, &#39;%&#39;) . Accuracy of the prediction using clusters: 89.9 % . 8.2) Run the first hierarchical clustering algorithm (maximum distances) . # Get rid of the names of the players since this information is not relevant for the cluster analysis hier_clustering_df_1 = player_data_df.copy() # The argument linkage = &#39;complete&#39; uses the maximum distances between all observations of the two sets. hier_clustering_df_1[&#39;Cluster Label&#39;] = AgglomerativeClustering(n_clusters=3, affinity=&#39;euclidean&#39;, linkage=&#39;complete&#39;).fit_predict(hier_clustering_df_1) # Check which cluster labels were assigned for each position df1 = hier_clustering_df_1[hier_clustering_df_1.index==&#39;Forward&#39;][[&#39;Cluster Label&#39;]].head(5) df2 = hier_clustering_df_1[hier_clustering_df_1.index==&#39;Midfielder/Defender&#39;][[&#39;Cluster Label&#39;]].head(5) df3 = hier_clustering_df_1[hier_clustering_df_1.index==&#39;Goal Keeper&#39;][[&#39;Cluster Label&#39;]].head(5) pd.concat([df1.reset_index(),df2.reset_index(),df3.reset_index()], axis=1) . Position Cluster Label Position Cluster Label Position Cluster Label . 0 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 1 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 2 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 3 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 4 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Determine the accuracy of the clustering technique . hier_clustering_df_1[&#39;Cluster Label&#39;] = hier_clustering_df_1[&#39;Cluster Label&#39;].map({2:&#39;Forward&#39;,0:&#39;Midfielder/Defender&#39;,1:&#39;Goal Keeper&#39;}) # Determine the accuracy of the clustering method accuracy_results = round((100*accuracy_score(hier_clustering_df_1.index, hier_clustering_df_1[&#39;Cluster Label&#39;])),1) print(&#39;Accuracy of the prediction using clusters: &#39;, accuracy_results, &#39;%&#39;) . Accuracy of the prediction using clusters: 86.8 % . 8.3) Run the second hierarchical clustering algorithm (variance minimization) . # Get rid of the names of the players since this information is not relevant for the cluster analysis hier_clustering_df_2 = player_data_df.copy() # The argument linkage = &#39;complete&#39; uses the maximum distances between all observations of the two sets. hier_clustering_df_2[&#39;Cluster Label&#39;] = AgglomerativeClustering(n_clusters=3, affinity=&#39;euclidean&#39;, linkage=&#39;ward&#39;).fit_predict(hier_clustering_df_2) # Check which cluster labels were assigned for each position df1 = hier_clustering_df_2[hier_clustering_df_2.index==&#39;Forward&#39;][[&#39;Cluster Label&#39;]].head(5) df2 = hier_clustering_df_2[hier_clustering_df_2.index==&#39;Midfielder/Defender&#39;][[&#39;Cluster Label&#39;]].head(5) df3 = hier_clustering_df_2[hier_clustering_df_2.index==&#39;Goal Keeper&#39;][[&#39;Cluster Label&#39;]].head(5) pd.concat([df1.reset_index(),df2.reset_index(),df3.reset_index()], axis=1) . Position Cluster Label Position Cluster Label Position Cluster Label . 0 Forward | 2 | Midfielder/Defender | 2 | Goal Keeper | 1 | . 1 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 2 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 3 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . 4 Forward | 2 | Midfielder/Defender | 0 | Goal Keeper | 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Determine the accuracy of the clustering technique . hier_clustering_df_2[&#39;Cluster Label&#39;] = hier_clustering_df_2[&#39;Cluster Label&#39;].map({2:&#39;Forward&#39;,0:&#39;Midfielder/Defender&#39;,1:&#39;Goal Keeper&#39;}) # Determine the accuracy of the clustering method accuracy_results = round((100*accuracy_score(hier_clustering_df_2.index, hier_clustering_df_2[&#39;Cluster Label&#39;])),1) print(&#39;Accuracy of the prediction using clusters: &#39;, accuracy_results, &#39;%&#39;) . Accuracy of the prediction using clusters: 89.4 % . 9) Visualize the results of the clustering methods (2D) . 9.1) Bring together the results of all algorithms . # Step 1: Create a column in the original dataset to allow for merging it with the dataframes with the data about the clustering algorithms player_data_df[&#39;Cluster Label&#39;] = player_data_df.index # Step 2: Create a column with the name of each clustering algorithm player_data_df[&#39;Algorithm&#39;] = &#39;Actual Labels (Source of Truth)&#39; k_means_df[&#39;Algorithm&#39;] = &#39;K-Means Clustering&#39; hier_clustering_df_1[&#39;Algorithm&#39;] = &#39;Hierar. Clustering (Max. distance)&#39; hier_clustering_df_2[&#39;Algorithm&#39;] = &#39;Hierar. Clustering (Variance min.)&#39; # Step 3: Merge the dataframes with all_algorithms_df = pd.concat([player_data_df, k_means_df, hier_clustering_df_1, hier_clustering_df_2]).reset_index() . 9.2) Create visualizations for 2 features at a time . sns.set(font_scale=1.5) sns.set_style(&quot;white&quot;) sns.relplot(data=all_algorithms_df , x=&#39;Attacking Feature&#39;, y=&#39;Defending Feature&#39;, col = &#39;Algorithm&#39;, hue=&quot;Cluster Label&quot;, kind=&quot;scatter&quot;).set_titles(col_template=&#39;{col_name}&#39;, size = 15, weight=&#39;bold&#39;) plt.subplots_adjust(wspace=0.1, hspace=0) plt.show() . sns.set(font_scale=1.5) sns.set_style(&quot;white&quot;) sns.relplot(data=all_algorithms_df , x=&#39;Skill Feature&#39;, y=&#39;Defending Feature&#39;, col = &#39;Algorithm&#39;, hue=&quot;Cluster Label&quot;, kind=&quot;scatter&quot;).set_titles(col_template=&#39;{col_name}&#39;, size = 15, weight=&#39;bold&#39;) plt.subplots_adjust(wspace=0.1, hspace=0) plt.show() . 10) Visualize the results of the clustering methods (3D) . # Step 1: Create a custom legend green_patch = mpatches.Patch(color=&#39;green&#39;, label=&#39;Forward&#39;) orange_patch = mpatches.Patch(color=&#39;orange&#39;, label=&#39;Midfielder/Defender&#39;) red_patch = mpatches.Patch(color=&#39;red&#39;, label=&#39;Goal Keeper&#39;) # Step 2: Map colors to each cluster label all_algorithms_df[&#39;color&#39;] = all_algorithms_df[&#39;Cluster Label&#39;].map({&#39;Forward&#39;:&#39;green&#39;,&#39;Midfielder/Defender&#39;:&#39;orange&#39;,&#39;Goal Keeper&#39;:&#39;red&#39;}) # Step 3: Create the subplots, one by one fig, ax = plt.subplots(1,4,figsize=(20,7),subplot_kw=dict(projection=&#39;3d&#39;)) algorithm_list = [&#39;Actual Labels (Source of Truth)&#39;, &#39;K-Means Clustering&#39;,&#39;Hierar. Clustering (Max. distance)&#39;,&#39;Hierar. Clustering (Variance min.)&#39;] for i in range(0,len(algorithm_list)): df = all_algorithms_df[all_algorithms_df[&#39;Algorithm&#39;]==algorithm_list[i]] x,y,z,c = df[&#39;Attacking Feature&#39;], df[&#39;Defending Feature&#39;], df[&#39;Skill Feature&#39;], df[&#39;color&#39;] ax[i].scatter(x,y,z, c = c) ax[i].set_title(algorithm_list[i], fontsize = 14, weight=&#39;bold&#39;) ax[i].set_xlabel(&#39;Attacking Feature&#39;, fontsize = 14, labelpad=15) ax[i].set_ylabel(&#39;Defending Feature&#39;, fontsize = 14, labelpad=15) ax[i].set_zlabel(&#39;Skill Feature&#39;, fontsize = 14, labelpad=15) ax[i].tick_params(labelsize=12) ax[i].dist = 12 plt.subplots_adjust(wspace=0, hspace=0) plt.legend(handles=[green_patch, orange_patch, red_patch], loc=&#39;center left&#39;, bbox_to_anchor=(1, 0.5),frameon=True,fontsize=12) plt.show() .",
            "url": "https://leonardodecastro.github.io/data_science_blog/k-means%20clustering/hierarchical%20clustering/maximum%20distances/variance%20minimization/elbow%20method/silhouette%20method/dendograms/optimal%20number%20of%20clusters/web%20scraping/hyperparameter%20tuning/machine%20learning/2021/07/03/Machine-Learning-Unsupervised-Learning-1.html",
            "relUrl": "/k-means%20clustering/hierarchical%20clustering/maximum%20distances/variance%20minimization/elbow%20method/silhouette%20method/dendograms/optimal%20number%20of%20clusters/web%20scraping/hyperparameter%20tuning/machine%20learning/2021/07/03/Machine-Learning-Unsupervised-Learning-1.html",
            "date": " • Jul 3, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Tree-based algorithms (Hyperparameter Tuning)",
            "content": "1) Import libraries and define functions . 1.1) Install libraries . !pip install dtreeviz &amp;&gt; /dev/null !pip install catboost &amp;&gt; /dev/null . 1.2) Import Libraries . import warnings import numpy as np import pandas as pd import seaborn as sns import lightgbm as lgb from subprocess import call from termcolor import colored import matplotlib.pyplot as plt from itertools import chain,cycle from sklearn import tree, metrics from xgboost import XGBClassifier from dtreeviz.trees import dtreeviz from catboost import CatBoostClassifier from yellowbrick.contrib.wrapper import wrap from IPython.display import Image, display, HTML, display_html from sklearn.tree import export_graphviz, DecisionTreeClassifier from yellowbrick.classifier import ROCAUC, ConfusionMatrix, ClassificationReport from sklearn.model_selection import train_test_split, RandomizedSearchCV, RepeatedStratifiedKFold from sklearn.ensemble import BaggingClassifier, RandomForestClassifier, GradientBoostingClassifier sns.set_theme() warnings.filterwarnings(&quot;ignore&quot;) plt.rcParams[&#39;font.family&#39;] = &#39;DeJavu Serif&#39; . 2) Exploratory Data Analysis (EDA) . For the sake of this tutorial, we will not engage in extensive EDA. However, the visualization posts bring very detailed EDA analyses. . 2.1) Load File . file_name_1 = &#39;https://raw.githubusercontent.com/leonardodecastro/data/main/heart.csv&#39; data = pd.read_csv(file_name_1,header=None, names=([&#39;A&#39;,&#39;S&#39;, &#39;TCP&#39;, &#39;RBP&#39;, &#39;C&#39;, &#39;BS&#39;, &#39;REE&#39;, &#39;MHRA&#39;, &#39;EIA&#39;, &#39;DIE&#39;, &#39;SPE&#39;, &#39;NMV&#39;, &#39;T&#39;, &#39;HD&#39;])) data.head(2) . A S TCP RBP C BS REE MHRA EIA DIE SPE NMV T HD . 0 63.0 | 1.0 | 1.0 | 145.0 | 233.0 | 1.0 | 2.0 | 150.0 | 0.0 | 2.3 | 3.0 | 0.0 | 6.0 | 0 | . 1 67.0 | 1.0 | 4.0 | 160.0 | 286.0 | 0.0 | 2.0 | 108.0 | 1.0 | 1.5 | 2.0 | 3.0 | 3.0 | 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; A = &#39;Age&#39; &ensp; | &ensp; S = &#39;Sex&#39; &ensp; | &ensp; TCP = &#39;Type of chest pain&#39; &ensp; | &ensp; RBP = &#39;Resting blood pressure&#39; &ensp; | &ensp; C = &#39;Cholesterol&#39; &ensp; | &ensp; BS = &#39;Blood sugar&#39; &ensp; | &ensp; REE = &#39;Resting electrocardiographic results&#39; &ensp; | &ensp; MHRA = &#39;Maximum heart rate achieved&#39; &ensp; | &ensp; EIA = &#39;Exercise induced angina&#39; &ensp; | &ensp; DIE = &#39;ST depression induced by exercise&#39; &ensp; | &ensp; SPE = &#39;Slope of the peak exercise ST segment&#39; &ensp; | &ensp; T = &#39;Thalassemia&#39; &ensp; | &ensp; NMV = &#39;Number of major vessels colored by flourosopy&#39; &ensp; | &ensp; HD = &#39;Heart Disease?&#39; . 3) Split and scale data . Classification trees do not require normalization since this is a type of tree-based algorithm which relies on rules. This means that classification trees are not affected by monotonic transformations of the input features. | . On the other hand, if we were to use error based algorithms such as logistic and linear regression or even neural networkds, the convergence to the global minimum would be faster if the variables were scaled. | . # Determine which variables are the features and which variable is the target X = data.drop([&#39;HD&#39;],axis=1) y = data[ &#39;HD&#39;] # Split the dataframe into the training set and the test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42, stratify=y) . 4) Hyperparameter tuning (random search + cross validation) . We seek to optimize recall to minimize the number of false negatives (failing to diagnose heart disease is a dire outcome). | We use early stopping to prevent overfitting and speed up model training for the XGboost, LightGBM and CatBoost classifiers. | When using classifiers, RandomizedSearchCV automatically considers stratified k-fold cross validation when a number is specified (cv=5). | . 4.1) Decision Tree Classifier (Pruned) . We use the max-depth argument to prune the tree. . # Step 1: Select the classifier clf = DecisionTreeClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&quot;splitter&quot;:[&quot;best&quot;,&quot;random&quot;], &quot;min_samples_leaf&quot;:[1,2,3,4,5,6,7,8,9,10], &quot;criterion&quot; :[&quot;gini&quot;, &quot;entropy&quot;, &quot;log_loss&quot;], &quot;random_state&quot; : [42], &quot;min_weight_fraction_leaf&quot;:[0, 0.1,0.2,0.3,0.4,0.5],&quot;min_impurity_decrease&quot;: [0.0] ,&quot;class_weight&quot;:[None,&#39;balanced&#39;], &quot;max_leaf_nodes&quot;:[None,10,20,30,40,50,60,70,80,90], &#39;min_samples_split&#39;: [1,2,3,4,5,6,7,8,9,10], &quot;ccp_alpha&quot;: [0],&quot;max_depth&quot; : [2,3,4,5,6,7]} # Step 3: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = 5, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel()) # We need to use .values.ravel() to avoid warning message best_parameters_model_1 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_1) . Optimal hyperparameters: {&#39;splitter&#39;: &#39;random&#39;, &#39;random_state&#39;: 42, &#39;min_weight_fraction_leaf&#39;: 0, &#39;min_samples_split&#39;: 4, &#39;min_samples_leaf&#39;: 2, &#39;min_impurity_decrease&#39;: 0.0, &#39;max_leaf_nodes&#39;: 80, &#39;max_depth&#39;: 6, &#39;criterion&#39;: &#39;entropy&#39;, &#39;class_weight&#39;: &#39;balanced&#39;, &#39;ccp_alpha&#39;: 0} . Find detailed information on each hyperparameter of decision tree classifiers on the following website: . https://medium.com/@mohtedibf/indepth-parameter-tuning-for-decision-tree-6753118a03c3 . 4.2) Random Forest Classifier . # Step 1: Select the classifier clf = RandomForestClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&quot;n_estimators&quot; : [100, 200, 300, 400, 500], &quot;criterion&quot; :[&quot;gini&quot;, &quot;entropy&quot;, &quot;log_loss&quot;], &quot;max_depth&quot; : [2,3,4,5,6,7],&#39;min_samples_split&#39;: [1,2,3,4,5,6,7,8,9,10], &quot;min_samples_leaf&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;ccp_alpha&quot;: [0], &quot;class_weight&quot;:[None,&#39;balanced&#39;], &quot;min_weight_fraction_leaf&quot;:[0, 0.1,0.2,0.3,0.4,0.5], &quot;max_features&quot; : [&#39;auto&#39;, &#39;sqrt&#39;], &quot;max_leaf_nodes&quot;:[None,10,20,30,40,50,60,70,80,90], &quot;min_impurity_decrease&quot;: [0.0], &quot;random_state&quot;:[42]} # Step 3: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = 5, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel()) # We need to use .values.ravel() to avoid warning message best_parameters_model_2 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_2) . Optimal hyperparameters: {&#39;random_state&#39;: 42, &#39;n_estimators&#39;: 200, &#39;min_weight_fraction_leaf&#39;: 0.3, &#39;min_samples_split&#39;: 4, &#39;min_samples_leaf&#39;: 4, &#39;min_impurity_decrease&#39;: 0.0, &#39;max_leaf_nodes&#39;: 30, &#39;max_features&#39;: &#39;auto&#39;, &#39;max_depth&#39;: 4, &#39;criterion&#39;: &#39;entropy&#39;, &#39;class_weight&#39;: &#39;balanced&#39;, &#39;ccp_alpha&#39;: 0} . 4.3) Gradient Boosting Classifier . # Step 1: Select the classifier clf = GradientBoostingClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&quot;n_estimators&quot; : [100, 200, 300, 400, 500], &quot;criterion&quot; :[&quot;friedman_mse&quot;, &quot;squared_error&quot;, &quot;mse&quot;], &quot;loss&quot;:[&#39;log_loss&#39;, &#39;deviance&#39;, &#39;exponential&#39;], &quot;max_depth&quot; : [2,3,4,5,6,7],&#39;min_samples_split&#39;: [1,2,3,4,5,6,7,8,9,10], &quot;min_samples_leaf&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;ccp_alpha&quot;: [0], &quot;min_weight_fraction_leaf&quot;:[0, 0.1,0.2,0.3,0.4,0.5], &quot;max_features&quot; : [&#39;auto&#39;, &#39;sqrt&#39;],&#39;learning_rate&#39;:[0.01, 0.05, 0.1, 0.15, 0.2, 0.3], &quot;max_leaf_nodes&quot;:[None,10,20,30,40,50,60,70,80,90], &quot;min_impurity_decrease&quot;: [0.0],&quot;random_state&quot;:[42],&#39;subsample&#39; : [0.4,0.5,0.6,0.7,0.8,1.0]} # Step 3: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = 5, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel()) # We need to use .values.ravel() to avoid warning message best_parameters_model_3 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_3) . Optimal hyperparameters: {&#39;subsample&#39;: 0.4, &#39;random_state&#39;: 42, &#39;n_estimators&#39;: 200, &#39;min_weight_fraction_leaf&#39;: 0.4, &#39;min_samples_split&#39;: 8, &#39;min_samples_leaf&#39;: 8, &#39;min_impurity_decrease&#39;: 0.0, &#39;max_leaf_nodes&#39;: 40, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;max_depth&#39;: 6, &#39;loss&#39;: &#39;deviance&#39;, &#39;learning_rate&#39;: 0.15, &#39;criterion&#39;: &#39;mse&#39;, &#39;ccp_alpha&#39;: 0} . 4.4) Extreme Gradient Boosting Classifier . # Step 1: Select the classifier clf = XGBClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&quot;n_estimators&quot; : [i for i in range(100,1000,100)], &quot;max_depth&quot; : [2,3,4,5,6,7], &#39;learning_rate&#39;:[0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.3], &quot;random_state&quot;:[42], &#39;min_child_weight&#39;: [1,2,3,4,5,6,7], &#39;subsample&#39;:[i/10.0 for i in range(1,10)], &#39;early_stopping_rounds&#39;:[5], &#39;gamma&#39;:[0.01, 0.05, 0.1, 0.15, 0.2, 0.3], &#39;colsample_bytree&#39;:[i/10.0 for i in range(1,10)], &#39;reg_lambda&#39; : [0, 0.01, 0.05, 0.1, 0.15, 0.2, 0.3]} # Step 3: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = 5, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel()) # We need to use .values.ravel() to avoid warning message best_parameters_model_4 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_4) . Optimal hyperparameters: {&#39;subsample&#39;: 0.3, &#39;reg_lambda&#39;: 0.3, &#39;random_state&#39;: 42, &#39;n_estimators&#39;: 900, &#39;min_child_weight&#39;: 4, &#39;max_depth&#39;: 4, &#39;learning_rate&#39;: 0.15, &#39;gamma&#39;: 0.2, &#39;early_stopping_rounds&#39;: 5, &#39;colsample_bytree&#39;: 0.4} . More information on the hyperparameters for xgboost at the following page: https://xgboost.readthedocs.io/en/stable/python/python_api.html . import xgboost as xgb from sklearn.model_selection import StratifiedKFold . 4.5) Light Gradient Boosting Classifier . # Step 1: Select the classifier clf = lgb.LGBMClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&quot;n_estimators&quot; : [i for i in range(100,1000,100)], &quot;max_depth&quot; : [2,3,4,5,6,7], &#39;learning_rate&#39;:[0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.3], &#39;num_leaves&#39; : [i for i in range(10,200,10)], &#39;lambda_l2&#39;:[0, 0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.3, 1, 5, 10], &quot;random_state&quot;:[42], &#39;subsample&#39;:[i/10.0 for i in range(1,10)], &#39;feature_fraction&#39;:[i/10.0 for i in range(1,10)], &#39;early_stopping_round&#39; : [5], &#39;bagging_fraction&#39; :[i/10.0 for i in range(1,10)], &#39;bagging_freq&#39;: [i for i in range(1,10)], &#39;min_child_samples&#39; : [i for i in range(1,100)], &#39;min_data_in_leaf&#39;: [i for i in range(20,200,10)], &#39;lambda_l1&#39; : [0, 0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.3, 1, 5, 10]} # Step 3: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = 5, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel(), eval_set = (X_train, y_train), verbose=0) # We need to use .values.ravel() to avoid warning message best_parameters_model_5 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_5) . Optimal hyperparameters: {&#39;subsample&#39;: 0.8, &#39;random_state&#39;: 42, &#39;num_leaves&#39;: 160, &#39;n_estimators&#39;: 800, &#39;min_data_in_leaf&#39;: 20, &#39;min_child_samples&#39;: 12, &#39;max_depth&#39;: 3, &#39;learning_rate&#39;: 0.3, &#39;lambda_l2&#39;: 0.05, &#39;lambda_l1&#39;: 0.05, &#39;feature_fraction&#39;: 0.3, &#39;early_stopping_round&#39;: 5, &#39;bagging_freq&#39;: 2, &#39;bagging_fraction&#39;: 0.3} . The following pages provide good sources to read about how to prevent ovefitting using Light Gradient Boosting Classifier: . https://towardsdatascience.com/kagglers-guide-to-lightgbm-hyperparameter-tuning-with-optuna-in-2021-ed048d9838b5 | https://practicaldatascience.co.uk/machine-learning/how-to-tune-a-lightgbmclassifier-model-with-optuna | . 4.6) Categorical Booting Classifier . # Step 1: Select the classifier clf = CatBoostClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&#39;depth&#39;:[2,3,4,5,6,7], &#39;n_estimators&#39;:[i for i in range(100,1000,100)], &#39;subsample&#39;: [i/10 for i in range(0,10)], &#39;learning_rate&#39;: [0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.3], &#39;num_leaves&#39;: [i for i in range(16,40,2)], &#39;max_bin&#39;:[i for i in range(150,300,10)], &#39;l2_leaf_reg&#39; : list(10.0**(np.arange(-8, 2))), &#39;model_size_reg&#39;: list(np.linspace(0, 10, 50)), &#39;early_stopping_rounds&#39;:[5], &#39;bagging_temperature&#39;:[i for i in range(0,10)],&#39;random_strength&#39;: list(np.linspace(0, 10, 50))} # Step 3: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = 5, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel(), eval_set = (X_train, y_train), verbose=0) # We need to use .values.ravel() to avoid warning message best_parameters_model_6 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_6) . Optimal hyperparameters: {&#39;subsample&#39;: 0.3, &#39;random_strength&#39;: 2.6530612244897958, &#39;num_leaves&#39;: 16, &#39;n_estimators&#39;: 400, &#39;model_size_reg&#39;: 5.714285714285714, &#39;max_bin&#39;: 160, &#39;learning_rate&#39;: 0.01, &#39;l2_leaf_reg&#39;: 0.1, &#39;early_stopping_rounds&#39;: 5, &#39;depth&#39;: 4, &#39;bagging_temperature&#39;: 8} . The following pages provide good sources to read about how to prevent ovefitting using Light Gradient Boosting Classifier: . https://docs.aws.amazon.com/sagemaker/latest/dg/catboost-tuning.html | https://effectiveml.com/using-grid-search-to-optimise-catboost-parameters.html | https://www.kaggle.com/code/saurabhshahane/catboost-hyperparameter-tuning-with-optuna | https://www.kaggle.com/code/shivampanwar/catboost-and-hyperparameter-tuning-using-bayes | . 5) Evaluation of optimal model metrics . 5.1) Classif. Report, ROC Curve and Confusion Matrix (Decision Tree - Pruned) . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = DecisionTreeClassifier(**best_parameters_model_1) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . 5.2) Classif. Report, ROC Curve and Confusion Matrix (Random Forest Classifier) . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = RandomForestClassifier(**best_parameters_model_2) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . 5.3) Classif. Report, ROC Curve and Confusion Matrix (Gradient Boosting Classifier) . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier (We need to fit it beforehand so that the visualizations work later on) model = GradientBoostingClassifier(**best_parameters_model_3) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . 5.4) Classif. Report, ROC Curve and Confusion Matrix (Extreme Gradient Boosting Classifier) . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier (We need to fit it beforehand so that the visualizations work later on) model = wrap(XGBClassifier(**best_parameters_model_4)) model.fit(X_train, y_train) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . 5.5) Classif. Report, ROC Curve and Confusion Matrix (Light Gradient Boosting Classifier) . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier (We need to fit it beforehand so that the visualizations work later on) model = wrap(lgb.LGBMClassifier(**best_parameters_model_5)) model.fit(X_train, y_train, eval_set = (X_train, y_train), verbose=0) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . 5.6) Classif. Report, ROC Curve and Confusion Matrix (Categorical Boosting Classifier) . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier (We need to fit it beforehand so that the visualizations work later on) model = wrap(CatBoostClassifier(**best_parameters_model_6)) model.fit(X_train, y_train, eval_set = (X_train, y_train), verbose=0) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . The ROC curve indicates that the classifiers outperform random classifier (the baselines). | The Decision Tree Classifier presents high levels of ovefitting. The other models did not present levels of underfitting or overfitting that are enough to cause any concern. In part 6, we show how to prevent overfitting using other cross-validation techniques. | . 6) Reduce overfitting using other cross-validation techniques . We use repeated stratified K-Fold as the cross-validation strategy solely for the decision tree classifier to avoid overfitting. We did not use this strategy for other classifiers since they did not overfit using the stratified k-fold strategy, which is a less time-consuming technique. | . 6.1) Hyperparameter tuning (random search + repeated stratified K-Fold cross validation) . # Step 1: Select the classifier clf = DecisionTreeClassifier() # Step 2: Select possible hyperparameters to be tested parameters = {&quot;splitter&quot;:[&quot;best&quot;,&quot;random&quot;], &quot;min_samples_leaf&quot;:[1,2,3,4,5,6,7,8,9,10], &quot;criterion&quot; :[&quot;gini&quot;, &quot;entropy&quot;, &quot;log_loss&quot;], &quot;random_state&quot; : [42], &quot;min_weight_fraction_leaf&quot;:[0, 0.1,0.2,0.3,0.4,0.5],&quot;min_impurity_decrease&quot;: [0.0] ,&quot;class_weight&quot;:[None,&#39;balanced&#39;], &quot;max_leaf_nodes&quot;:[None,10,20,30,40,50,60,70,80,90], &#39;min_samples_split&#39;: [1,2,3,4,5,6,7,8,9,10], &quot;ccp_alpha&quot;: [0],&quot;max_depth&quot; : [2,3,4,5,6,7]} # Step 3: Specify cross-validation strategy cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state = 42) # Step 4: Determine the optimal hyperparameters to maximize the recall metrics grid = RandomizedSearchCV(estimator = clf, param_distributions = parameters, scoring = &#39;recall&#39;, cv = cv, n_iter = 500, random_state=42) grid.fit(X_train, y_train.ravel()) # We need to use .values.ravel() to avoid warning message best_parameters_model_1 = grid.best_params_ print(&#39;Optimal hyperparameters: n n&#39;,best_parameters_model_1) . Optimal hyperparameters: {&#39;splitter&#39;: &#39;random&#39;, &#39;random_state&#39;: 42, &#39;min_weight_fraction_leaf&#39;: 0.1, &#39;min_samples_split&#39;: 4, &#39;min_samples_leaf&#39;: 3, &#39;min_impurity_decrease&#39;: 0.0, &#39;max_leaf_nodes&#39;: 80, &#39;max_depth&#39;: 4, &#39;criterion&#39;: &#39;entropy&#39;, &#39;class_weight&#39;: &#39;balanced&#39;, &#39;ccp_alpha&#39;: 0} . 6.2) Evaluation of optimal model metrics . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14, &#39;legend.fontsize&#39;: 12}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = DecisionTreeClassifier(**best_parameters_model_1) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;,micro=False, macro=False), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . We can see that the overfitting issue was solved using repeated stratified K-Fold for cross validation. . 7) Feature importance plots for the optimal models . # Step 1: Select the classifier (We need to fit it beforehand so that the visualizations work later on) model_1 = DecisionTreeClassifier(**best_parameters_model_1).fit(X_train, y_train) model_2 = RandomForestClassifier(**best_parameters_model_2).fit(X_train, y_train) model_3 = GradientBoostingClassifier(**best_parameters_model_3).fit(X_train, y_train) model_4 = wrap(XGBClassifier(**best_parameters_model_4)).fit(X_train, y_train) model_5 = wrap(lgb.LGBMClassifier(**best_parameters_model_5)).fit(X_train, y_train, eval_set = (X_train, y_train), verbose=0) model_6 = wrap(CatBoostClassifier(**best_parameters_model_6)).fit(X_train, y_train, eval_set = (X_train, y_train), verbose=0) dict_models = { &#39;Decision Tree Classifier&#39;: model_1, &quot;Random Forest Classifier&quot;: model_2, &quot;Gradient Boosting Classifier&quot; : model_3, &#39;Extreme Gradient Boosting Classifier&#39;: model_4, &quot;Light Gradient Boosting Classifier&quot;: model_5, &quot;Categorical Boosting Classifier&quot; : model_6} # Step 2: Create a dataframe with the feature importance for each model list_df = [] for key, value in dict_models.items(): feat_dict= {} for col, val in sorted(zip(X_train.columns, value.feature_importances_),key=lambda x:x[1],reverse=True): feat_dict[col]=val feat_df = pd.DataFrame({&#39;Variable&#39;:feat_dict.keys(),&#39;Feature Importance&#39;:feat_dict.values()}) feat_df[&#39;Model&#39;] = [key]*len(X_train.columns) list_df.append(feat_df) # Step 3: Create a dataframe with the feature importance for all models feature_importance_df = pd.concat(list_df) # Step 4: Create a visualization for the feature importance of each model sns.set(font_scale=1.5) g = sns.catplot(x=&#39;Feature Importance&#39;, y=&#39;Variable&#39;, hue = &#39;Variable&#39;, col = &#39;Model&#39;, col_wrap=3, data=feature_importance_df, sharex=False, sharey=False, kind=&#39;bar&#39;,dodge=False, height=5, aspect=1.5) g.set_titles(col_template=&#39;{col_name}&#39;) plt.show() . The visualization has a consistent color scheme across plots so that conclusions regarding the most relevant features can be drawn. | We can see that the features &quot;T&quot;, &quot;TCP&quot; and &quot;NMV&quot; are often among the most relevant predictors of heart disease. | . 8) Visualize decision trees (Help clients understand machine learning) . 8.1) Visualization 1 - More complete visualization . # Use export_graphviz to create an image that illustrates the decision tree classifier export_graphviz(model_1, out_file=&#39;tree.dot&#39;, feature_names = X_train.columns, class_names = [&#39;0&#39;,&#39;1&#39;], rounded = True, proportion = False, precision = 2, filled = True) # Convert to png using system command (requires Graphviz) call([&#39;dot&#39;, &#39;-Tpng&#39;, &#39;tree.dot&#39;, &#39;-o&#39;, &#39;tree.png&#39;, &#39;-Gdpi=600&#39;]) Image(filename = &#39;tree.png&#39;) . 8.2) Visualization 2 - Cleaner visualization . dtreeviz(model_1, x_data=X_train, y_data=y_train, feature_names=X.columns, title=&quot;Decision Tree 1&quot;,fancy=False, scale=1.8) . G Decision Tree 1 cluster_legend node3 REE@0.99 node4 TCP@3.61 leaf11 node3-&gt;leaf11 leaf12 node3-&gt;leaf12 leaf5 node4-&gt;leaf5 leaf6 node4-&gt;leaf6 node1 A@53.12 node1-&gt;node3 node1-&gt;node4 node2 EIA@0.98 node8 REE@0.16 leaf9 node8-&gt;leaf9 leaf10 node8-&gt;leaf10 node2-&gt;node8 leaf7 node2-&gt;leaf7 node0 T@6.53 node0-&gt;node1 &#8804; node0-&gt;node2 &gt; legend",
            "url": "https://leonardodecastro.github.io/data_science_blog/tree-based%20algorithms/hyperparameter%20tuning/machine%20learning/decision%20tree%20classifier/random%20forest%20classifier/gradient%20boosting%20classifier/extreme%20gradient%20boosting%20classifier/light%20gradient%20boosting%20classifier/categorical%20booting%20classifier/feature%20importance/tree-based%20algorithm%20visualizations/overfitting%20reduction/xgboost/lightgbm/catboost/randomizedsearchcv/overfitting/2021/06/06/Machine-Learning-Tree-Based-Models.html",
            "relUrl": "/tree-based%20algorithms/hyperparameter%20tuning/machine%20learning/decision%20tree%20classifier/random%20forest%20classifier/gradient%20boosting%20classifier/extreme%20gradient%20boosting%20classifier/light%20gradient%20boosting%20classifier/categorical%20booting%20classifier/feature%20importance/tree-based%20algorithm%20visualizations/overfitting%20reduction/xgboost/lightgbm/catboost/randomizedsearchcv/overfitting/2021/06/06/Machine-Learning-Tree-Based-Models.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Naïve Bayes (Hyperparameter Tuning)",
            "content": "1) Import libraries and define functions . 1.1) Install libraries . !pip install word2number &amp;&gt; /dev/null . 1.2) Import libraries . import re import nltk import numpy as np import pandas as pd import seaborn as sns from word2number import w2n import matplotlib.pyplot as plt from sklearn.naive_bayes import MultinomialNB from sklearn.model_selection import cross_validate from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from yellowbrick.classifier import ROCAUC, ConfusionMatrix, ClassificationReport nltk.download(&#39;stopwords&#39;) from nltk.corpus import stopwords STOPWORDS = set(stopwords.words(&#39;english&#39;)) . [nltk_data] Downloading package stopwords to /root/nltk_data... [nltk_data] Unzipping corpora/stopwords.zip. . 1.3) Define functions for later use . # 1: Function to turn number words into numbers def numeric_words_converter(list_words): back_to_list =[] for string in list_words: try: value = w2n.word_to_num(string) if string==&#39;point&#39;: value = string except: value=string back_to_list.append(value) return back_to_list . 2) Exploratory Data Analysis (EDA) . 2.1) Load File . data = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/SMSSpamCollection.csv&#39;) data.head(2) . Type of SMS SMS content . 0 ham | Go until jurong point, crazy.. Available only ... | . 1 ham | Ok lar... Joking wif u oni... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 2.2) Clean sentences . We will use a function for the second cleaning procedure since it would be complicated to do so with a lambda function. | The first cleaning procedure turns strings in each cell into lists. This means that the lambda functions employed in this analysis are slightly different from lambda functions that are often used in dataframes without lists as cell values. | . #### 1) Remove punctuaction tokenizer = nltk.RegexpTokenizer(r&quot; w+&quot;) data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda word_string: tokenizer.tokenize(word_string)) #### 2) Remove all numbers from the SMS messages # 2.1) Turn number words into numbers data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(numeric_words_converter) # 2.2) Eliminate numbers data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda list_words: [word for word in list_words if type(word) == str]) # 2.3) Eliminate strings with numbers data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda list_words: [word for word in list_words if not re.search(r&#39; d&#39;,word)]) #### 3) Change all SMS messages to lower case data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda list_words:[word.lower() for word in list_words]) #### 4) Remove stop words from the SMS messages data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda list_words:[word for word in list_words if word not in STOPWORDS]) #### 5) Eliminate single letters data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda list_words:[word for word in list_words if len(word) &gt; 1]) #### 6) Turn lists of words into a single string data[&#39;SMS content&#39;] = data[&#39;SMS content&#39;].apply(lambda list_words:&#39; &#39;.join([str(word) for word in list_words])) #### 7) Visualize dataset data.head(2) . Type of SMS SMS content . 0 ham | go jurong point crazy available bugis great wo... | . 1 ham | ok lar joking wif oni | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 2.3) Turn the target variable into binary variables (1 for Spam and 0 for Ham) . data[&#39;Type of SMS&#39;] = data[&#39;Type of SMS&#39;].map({&#39;spam&#39;:1,&#39;ham&#39;:0}) . 3) Split and scale data . Naïve Bayes is not affected by scaling. Thus, we will not scale the numbers obtained using the count vectorizer. | We neet to convert text into numerical data using the CountVectorizer so as to train a Naïve Bayes classifier. | . # Determine which variables are the features and which variable is the target - vectorizer = CountVectorizer() X = vectorizer.fit_transform(data[&#39;SMS content&#39;]) y = data[&#39;Type of SMS&#39;] # Split the dataframe into the training set and the test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state=42, stratify=y) . 4) Hyperparameter tuning . We apply the multinomial Naïve Bayes classifier, where the features are assumed to be generated from a simple multinomial distribution. . | The multinomial Naïve Bayes classifier is suitable for classification of this SMS data with discrete features. . | The multinomial Naïve Bayes classifier, compared to the binomial Naïve Bayes takes into account the frequency of occurance of words (features) in each record. While this may not make much of a difference when the features (words) are hetergeneous (as is the case here), multinomial bayes classifier will work very well in all cases and we therefore decided to use it as our classifier. . | Guassian based Naive Bayes classifier imposes a Gaussian distribution on the occurance of a feature(word) in a message. The distribution is not continuous and further, it does make sense to impose a mean, std. devation for any feature (word) given that SMS messages could be about anything and assuming a Guassian distribution in unecessarily restrictive. . | . 4.1) Calculate a wide range of metrics for model evaluation . # Step 1: Create a dictionary to store the metrics for different alpha values scores_dict = {} # Step 2: Train model for different alpha values (Laplace/Lidstone) smoothing parameter) for alpha in np.arange(0.01, 10, 0.01): # Part 1: Select classifier object clf = MultinomialNB(alpha=alpha) # Part 2: Determine the metrics that will be analyzed scoring = {&#39;accuracy&#39;: &#39;accuracy&#39;, &#39;precision&#39;: &#39;precision&#39;, &#39;recall&#39;: &#39;recall&#39;, &#39;f1&#39;: &#39;f1&#39;} # Part 3: Calculate metrics using cross-validation scores = cross_validate(clf, X_train, y_train, cv=5, scoring=scoring) # Part 4: Extract the mean of each one of the metrics scores_dict[alpha] = {&#39;accuracy&#39;: scores[&#39;test_accuracy&#39;].mean(), &#39;precision&#39;: scores[&#39;test_precision&#39;].mean(), &#39;recall&#39;: scores[&#39;test_recall&#39;].mean(), &#39;f1&#39;: scores[&#39;test_f1&#39;].mean()} # Step 3: Create a dataframe with model metrics metrics_df = pd.DataFrame.from_dict(scores_dict, orient=&#39;index&#39;).rename_axis(&#39;alpha&#39;).reset_index() . 4.2) Plot metrics for different alpha values . # Step 1: Melt the dataframe to allow for an easy way to plot with seaborn metrics_df_melted = pd.melt(metrics_df, id_vars =[&#39;alpha&#39;], value_vars =[&#39;accuracy&#39;, &#39;precision&#39;,&#39;recall&#39;, &#39;f1&#39;]) # Step 1: Set parameters for the visualization plt.rcParams.update({&#39;figure.figsize&#39;:(20,7),&#39;axes.titlesize&#39;: 20,&#39;axes.labelsize&#39;: 16,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) # Step 2: Generate visualization sns.lineplot(x=&quot;alpha&quot;, y=&quot;value&quot;, hue=&quot;variable&quot;, data=metrics_df_melted) plt.title(&quot;Performance Metrics for different alpha values&quot;) plt.ylabel(&#39;Cross-Validated Metric Values&#39;) plt.xlabel(&#39;Alpha value&#39;) plt.legend(bbox_to_anchor=(1, 0.5), loc=&quot;center left&quot;, fontsize=16) plt.show() . 4.3) Determine the alpha value that optimizes precision . For the sake of this analysis, we will consider that the effect of predicting that a certain message is SPAM when it is not is much more negative than not spotting a SPAM attempt. After all, if too many messages end up in the SPAM folder, clients might miss important information. On the other hand, too many SPAM messages might annoy users. Thus, we should seek to maximize f1 since it provides a balance between precision and recall. . ideal_alpha_value = metrics_df.sort_values(&#39;f1&#39;, ascending = False)[&#39;alpha&#39;].to_list()[0] . 5) Evaluation of optimal model metrics . 5.1) Classification Report, ROC Curve and Confusion Matrix . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = MultinomialNB(alpha=ideal_alpha_value) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_train, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train, y_train) # Fit the training data to the visualizer visualizer.score(X_test, y_test) # Evaluate the model on the test data visualizer.finalize() . We can see that the metrics for the training and test set are fairly similar, which indicates that there is no problem with overfitting or underfitting. Moreover, the ROC curve indicates that the classifier outperforms a random classifier (the baseline). . 6) Final considerations . 6.1) Is the classifier is well-suited for the data set? . The multinomial Naïve Bayes classifier is suitable for classification with discrete features. It represents the probability of counts among different categories, and thus multinomial naive Bayes is appropriate for features that represent counts or count rates. Notice that the features in our dataset are all categorial values as they are all the words. In addition, the features in our dataset are the counts of the words. As such, the Naïve Bayes classifier would be a good option for training the dataset on top of all; . | Since each of the single word from the dataset is treated as a feature, we have thousands of words and thus thousands of features in total. Our Naïve Bayes classifier works well on handling this huge amount of features, and even works well when there is a huge amount of irrelavant features (for example, some words are existed in both ham and spam messages) from the dataset. . | The &quot;naive&quot; in naive bayes classifier is due to the class conditional independence of features. In the case of SMS messages, naive bayes classifier assumes that the words in the SMS messages (features) are class conditionally independent of each other. i.e. the assumption is that there is less dependence between words used in any given SMS message. This, is not true in general (We don&#39;t form a sentence using a set of randomly picked words). Even so, this method works well because of 2 reasons: . The number of features are typically large and given that naive bayes treats all features equally, the more the features (words in our SMS data), the better the estimates. | We are not seeking to find the &quot;real&quot; probability of a message being &quot;spam&quot; or not, but simply assigning probability values to &quot;categorize&quot; the messages. In this case, we are only concerned with &quot;relative&quot; probabilistic measures. Therefore naive bayes classifier will work very well for this data. | . | 6.2) Why we did not oversample in face of the imbalanced dataset . The input sample, is typically considered to be an unbiased, random sample of population as a whole. This assumption is critical for all learning algorithms. This will break down if: . The sample is known to be biased. | The sample size is too small and the population data itself is biased towards one class. For example, in this sample, the number of &quot;ham&quot; messages far outweigh the number of &quot;spam&quot; messages, which is typically the case in population as a whole. | . Thus, one could potentially oversample the input training data to make the learning algorithm more discriminative on test data, so that the generalization error is reduced. This oversampling technique may work for some algorithms (e.g. knn classifier) . When using the Naive Bayes classifier algorithm, this may not be needed because of 2 reasons: . We calculate posterior probabilities for different classes and use the probability values to &quot;rank&quot; the output and don&#39;t use the probability value by themselves | Further, we derive the likelihood estimates and the prior probabilty from the input data and changing the input will change these quantities which may result in skewed classification. | .",
            "url": "https://leonardodecastro.github.io/data_science_blog/na%C3%AFve%20bayes/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/06/03/Machine-Learning-Na%C3%AFve-Bayes.html",
            "relUrl": "/na%C3%AFve%20bayes/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/06/03/Machine-Learning-Na%C3%AFve-Bayes.html",
            "date": " • Jun 3, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "K-Nearest Neighbours (Hyperparameter Tuning)",
            "content": "1) Import libraries . 1.1) Import libraries . import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import cross_validate from sklearn.model_selection import train_test_split from yellowbrick.classifier import ROCAUC, ConfusionMatrix, ClassificationReport pd.options.mode.chained_assignment = None . 2) Exploratory Data Analysis (EDA) . For the sake of this tutorial, we will not engage in extensive EDA. However, the visualization posts bring very detailed EDA analyses. . 2.1) Load File . Original data source: https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ . data = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/winequality-white.csv&#39;) . 2.2) Create a definition for Good Wine . data[&#39;Good Wine?&#39;] = np.where(data[&#39;quality&#39;] &lt; 7, 0, 1) . 2.3) Drop original quality feature . data.drop(&#39;quality&#39;, axis=1, inplace = True) . 3) Split and scale data . Since we will use cross validation, there is not need for a validation set. . 3.1) Split the data frame into the training, validation and test sets . # Determine X and y X = data.drop(&#39;Good Wine?&#39;, axis = 1) y = data[&#39;Good Wine?&#39;] # Split dataset (use the argument stratify to make sure we keep a reasonable number of both classes in the training and test sets) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify = y) . 3.2) Scale the dataset . # Select a type of scaler scaler = StandardScaler() # Apply fit_transform on the training set and apply it to the test set X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) . 4) Hyperparameter tuning . 4.1) Calculate a wide range of metrics for model evaluation . # Step 1: Create a dictionary to store the metrics for different k values scores_dict = {} # Step 2: Train model for different k values (number of neighbours) for k in range(1, 200): # Part 1: Select classifier object knn = KNeighborsClassifier(n_neighbors=k) # Part 2: Determine the metrics that will be analyzed scoring = {&#39;accuracy&#39;: &#39;accuracy&#39;, &#39;precision&#39;: &#39;precision&#39;, &#39;recall&#39;: &#39;recall&#39;, &#39;f1&#39;: &#39;f1&#39;} # Part 3: Calculate metrics using cross-validation scores = cross_validate(knn, X_train_scaled, y_train, cv=5, scoring=scoring) # Part 4: Extract the mean of each one of the metrics scores_dict[k] = {&#39;accuracy&#39;: scores[&#39;test_accuracy&#39;].mean(), &#39;precision&#39;: scores[&#39;test_precision&#39;].mean(), &#39;recall&#39;: scores[&#39;test_recall&#39;].mean(), &#39;f1&#39;: scores[&#39;test_f1&#39;].mean()} # Step 3: Create a dataframe with model metrics metrics_df = pd.DataFrame.from_dict(scores_dict, orient=&#39;index&#39;).rename_axis(&#39;K&#39;).reset_index() . 4.2) Plot metrics for different k values . # Step 1: Melt the dataframe to allow for an easy way to plot with seaborn metrics_df_melted = pd.melt(metrics_df, id_vars =[&#39;K&#39;], value_vars =[&#39;accuracy&#39;, &#39;precision&#39;,&#39;recall&#39;, &#39;f1&#39;]) # Step 1: Set parameters for the visualization plt.rcParams.update({&#39;figure.figsize&#39;:(20,7),&#39;axes.titlesize&#39;: 20,&#39;axes.labelsize&#39;: 16,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) # Step 2: Generate visualization sns.lineplot(x=&quot;K&quot;, y=&quot;value&quot;, hue=&quot;variable&quot;, data=metrics_df_melted) plt.title(&quot;Performance Metrics for different K values&quot;) plt.ylabel(&#39;Cross-Validated Metric Values&#39;) plt.xlabel(&#39;Number of K-neighbors&#39;) plt.legend(bbox_to_anchor=(1, 0.5), loc=&quot;center left&quot;, fontsize=16) plt.show() . 4.3) Determine number of neighbors that optimizes precision . For the sake of this analysis, we will consider that the company at hand is a website that provides wine recommendations. Thus, the cost of recommending a bad wine is very high. This means that this firm will seek to maximize precision. . ideal_number_neighbours = metrics_df.sort_values(&#39;precision&#39;, ascending = False)[&#39;K&#39;].to_list()[0] . 5) Evaluation of optimal model metrics . 5.1) Classification Report, ROC Curve and Confusion Matrix . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = KNeighborsClassifier(n_neighbors=ideal_number_neighbours) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train_scaled, y_train) # Fit the training data to the visualizer visualizer.score(X_train_scaled, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train_scaled, y_train) # Fit the training data to the visualizer visualizer.score(X_test_scaled, y_test) # Evaluate the model on the test data visualizer.finalize() . We can see that the metrics for the training and test set are fairly similar, which indicates that there is no problem with overfitting or underfitting. Moreover, the ROC curve indicates that the classifier outperforms a random classifier (the baseline). .",
            "url": "https://leonardodecastro.github.io/data_science_blog/knn/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/05/20/Machine-Learning-KNN-Tuning.html",
            "relUrl": "/knn/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/05/20/Machine-Learning-KNN-Tuning.html",
            "date": " • May 20, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leonardodecastro.github.io/data_science_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leonardodecastro.github.io/data_science_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://leonardodecastro.github.io/data_science_blog/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Chanin is an Associate Professor of Bioinformatics and the founder of the Data Professor 1 YouTube channel. . An educational YouTube channel about data science and bioinformatics. &#8617; . |",
          "url": "https://leonardodecastro.github.io/data_science_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonardodecastro.github.io/data_science_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}