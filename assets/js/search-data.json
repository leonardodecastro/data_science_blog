{
  
    
        "post0": {
            "title": "K-Nearest Neighbours (Hyperparameter Tuning)",
            "content": "1) Import libraries . 1.1) Import libraries . import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import cross_validate from sklearn.model_selection import train_test_split from yellowbrick.classifier import ROCAUC, ConfusionMatrix, ClassificationReport pd.options.mode.chained_assignment = None . 2) Exploratory Data Analysis (EDA) . For the sake of this tutorial, we will not engage in extensive EDA. However, the visualization posts bring very detailed EDA analyses. . 2.1) Load File . Original data source: https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ . data = pd.read_csv(&#39;https://raw.githubusercontent.com/leonardodecastro/data/main/winequality-white.csv&#39;) . 2.2) Create a definition for Good Wine . data[&#39;Good Wine?&#39;] = np.where(data[&#39;quality&#39;] &lt; 7, 0, 1) . 2.3) Drop original quality feature . data.drop(&#39;quality&#39;, axis=1, inplace = True) . 3) Split and scale data . Since we will use cross validation, there is not need for a validation set. . 3.1) Split the data frame into the training, validation and test sets . # Determine X and y X = data.drop(&#39;Good Wine?&#39;, axis = 1) y = data[&#39;Good Wine?&#39;] # Split dataset (use the argument stratify to make sure we keep a reasonable number of both classes in the training and test sets) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify = y) . 3.2) Scale the dataset . # Select a type of scaler scaler = StandardScaler() # Apply fit_transform on the training set and apply it to the test set X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) . 4) Hyperparameter tuning . 4.1) Calculate a wide range of metrics for model evaluation . # Step 1: Create a dictionary to store the metrics for different k values scores_dict = {} # Step 2: Train model for different k values (number of neighbours) for k in range(1, 200): # Part 1: Select classifier object knn = KNeighborsClassifier(n_neighbors=k) # Part 2: Determine the metrics that will be analyzed scoring = {&#39;accuracy&#39;: &#39;accuracy&#39;, &#39;precision&#39;: &#39;precision&#39;, &#39;recall&#39;: &#39;recall&#39;, &#39;f1&#39;: &#39;f1&#39;} # Part 3: Calculate metrics using cross-validation scores = cross_validate(knn, X_train_scaled, y_train, cv=5, scoring=scoring) # Part 4: Extract the mean of each one of the metrics scores_dict[k] = {&#39;accuracy&#39;: scores[&#39;test_accuracy&#39;].mean(), &#39;precision&#39;: scores[&#39;test_precision&#39;].mean(), &#39;recall&#39;: scores[&#39;test_recall&#39;].mean(), &#39;f1&#39;: scores[&#39;test_f1&#39;].mean()} # Step 3: Create a dataframe with model metrics metrics_df = pd.DataFrame.from_dict(scores_dict, orient=&#39;index&#39;).rename_axis(&#39;K&#39;).reset_index() . 4.2) Plot metrics for different k values . # Step 1: Melt the dataframe to allow for an easy way to plot with seaborn metrics_df_melted = pd.melt(metrics_df, id_vars =[&#39;K&#39;], value_vars =[&#39;accuracy&#39;, &#39;precision&#39;,&#39;recall&#39;, &#39;f1&#39;]) # Step 1: Set parameters for the visualization plt.rcParams.update({&#39;figure.figsize&#39;:(20,7),&#39;axes.titlesize&#39;: 20,&#39;axes.labelsize&#39;: 16,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) # Step 2: Generate visualization sns.lineplot(x=&quot;K&quot;, y=&quot;value&quot;, hue=&quot;variable&quot;, data=metrics_df_melted) plt.title(&quot;Performance Metrics for different K values&quot;) plt.ylabel(&#39;Cross-Validated Metric Values&#39;) plt.xlabel(&#39;Number of K-neighbors&#39;) plt.legend(bbox_to_anchor=(1, 0.5), loc=&quot;center left&quot;, fontsize=16) plt.show() . 4.3) Determine number of neighbors that optimizes precision . For the sake of this analysis, we will consider that the company at hand is a website that provides wine recommendations. Thus, the cost of recommending a bad wine is very high. This means that this firm will seek to maximize precision. . ideal_number_neighbours = metrics_df.sort_values(&#39;precision&#39;, ascending = False)[&#39;K&#39;].to_list()[0] . 5) Evaluation of optimal model metrics . 5.1) Classification Report, ROC Curve and Confusion Matrix . # Step 1: Set the size of the figure plt.rcParams.update({&#39;font.size&#39;: 14,&#39;axes.titlesize&#39;: 16,&#39;axes.labelsize&#39;: 14,&#39;xtick.labelsize&#39;: 14,&#39;ytick.labelsize&#39;: 14}) fig, axes = plt.subplots(2,3, figsize=(13, 8)) # Step 2: Select the classifier model = KNeighborsClassifier(n_neighbors=ideal_number_neighbours) # Step 3: Create lists with the visualizers visualizers_list_training = [ClassificationReport(model, classes=[0, 1], ax=axes[0,0], title = &quot;Class. Report (Training set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[0,1], title = &quot;ROC Curve (Training set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[0,2], title = &quot;Confusion Matrix (Training set)&quot;)] visualizers_list_test = [ClassificationReport(model, classes=[0, 1], ax=axes[1,0], title = &quot;Class. Report (Test set)&quot;), ROCAUC(model, classes=[0, 1], ax=axes[1,1], title = &quot;ROC Curve (Test set)&quot;), ConfusionMatrix(model, classes=[0, 1], ax=axes[1,2], title = &quot;Confusion Matrix (Test set)&quot;)] # Step 4: Generate visualizations for the training set for visualizer in visualizers_list_training: visualizer.fit(X_train_scaled, y_train) # Fit the training data to the visualizer visualizer.score(X_train_scaled, y_train) # Evaluate the model on the training data visualizer.finalize() # Step 5: Generate visualizations for the test set for visualizer in visualizers_list_test: visualizer.fit(X_train_scaled, y_train) # Fit the training data to the visualizer visualizer.score(X_test_scaled, y_test) # Evaluate the model on the test data visualizer.finalize() . We can see that the metrics for the training and test set are fairly similar, which indicates that there is no problem with overfitting or underfitting. Moreover, the ROC curve indicates that the classifier outperforms a random classifier (the baseline). .",
            "url": "https://leonardodecastro.github.io/data_science_blog/knn/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/05/20/Machine-Learning-KNN-Tuning.html",
            "relUrl": "/knn/hyperparameter%20tuning/machine%20learning/grid%20search/cross%20validation/model%20evaluation%20metrics/classification%20report/confusion%20matrix/roc%20curve/2021/05/20/Machine-Learning-KNN-Tuning.html",
            "date": " • May 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leonardodecastro.github.io/data_science_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leonardodecastro.github.io/data_science_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://leonardodecastro.github.io/data_science_blog/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Chanin is an Associate Professor of Bioinformatics and the founder of the Data Professor 1 YouTube channel. . An educational YouTube channel about data science and bioinformatics. &#8617; . |",
          "url": "https://leonardodecastro.github.io/data_science_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonardodecastro.github.io/data_science_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}